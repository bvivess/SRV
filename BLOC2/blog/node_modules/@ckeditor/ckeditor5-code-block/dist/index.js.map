{"version":3,"sources":["index.js","../src/utils.ts","../src/codeblockcommand.ts","../src/indentcodeblockcommand.ts","../src/outdentcodeblockcommand.ts","../src/converters.ts","../src/codeblockediting.ts","../src/codeblockui.ts","../src/codeblock.ts"],"names":["getNormalizedAndLocalizedLanguageDefinitions","editor","t","languageDefs","config","get","def","label","class","undefined","language","getPropertyAssociation","key","value","association","newKey","split","shift","getLeadingWhiteSpaces","textNode","data","match","rawSnippetTextToViewDocumentFragment","writer","text","fragment","createDocumentFragment","textLines","items","reduce","nodes","line","lineIndex","push","length","createElement","appendChild","getIndentOutdentPositions","model","selection","document","positions","isCollapsed","anchor","walker","getFirstRange","getWalker","ignoreElementEnd","direction","item","node","is","parent","previousSibling","startOffset","position","createPositionAt","every","pos","isEqual","isModelSelectionInCodeBlock","firstBlock","first","getSelectedBlocks","canBeCodeBlock","schema","element","isLimit","checkChild","getCodeBlockAriaAnnouncement","languagesToLabels","codeBlockLanguage","getAttribute","getTextNodeAtLineStart","createPositionBefore","nodeBefore","nodeAtStart","nodeAfter","CodeBlockCommand","Command","constructor","_lastLanguage","_getValue","isEnabled","_checkEnabled","execute","options","normalizedLanguagesDefs","firstLanguageInConfig","blocks","Array","from","forceValue","getLanguage","change","_applyCodeBlock","_removeCodeBlock","isCodeBlock","allowedBlocks","filter","block","rename","setAttribute","removeDisallowedAttributes","getChildren","child","forEach","remove","reverse","currentBlock","i","nextBlock","appendElement","merge","codeBlocks","range","createRangeOn","getItems","elementAfter","removeAttribute","lastLanguage","defaultLanguage","usePreviousLanguageChoice","IndentCodeBlockCommand","_indentSequence","indentSequenceTextElement","createText","insertContent","OutdentCodeBlockCommand","getLastOutdentableSequenceRange","deleteContent","createSelection","some","sequence","nodeAtPosition","leadingWhiteSpaces","lastIndexOfSequence","lastIndexOf","createRange","modelToViewCodeBlockInsertion","useLabels","languagesToClasses","evt","conversionApi","mapper","consumable","consume","targetViewPosition","toViewPosition","preAttributes","spellcheck","codeAttributes","code","createContainerElement","pre","insert","bindElements","modelToDataViewSoftBreakInsertion","name","dataViewToModelCodeBlockInsertion","editingView","classesToLanguages","defaultLanguageName","viewCodeElement","viewItem","viewPreElement","modelCursor","findAncestor","test","codeBlock","viewChildClasses","getClassNames","className","hasAttribute","convertChildren","safeInsert","updateConversionResult","dataViewToModelTextNewlinesInsertion","map","lastLine","getShiftedBy","offsetSize","softBreak","createPositionAfter","modelRange","dataViewToModelOrphanNodeConsumer","preElement","preChildren","childCodeElement","find","DEFAULT_ELEMENT","CodeBlockEditing","Plugin","pluginName","requires","ShiftEnter","define","languages","indentSequence","view","editing","commands","add","listenTo","commandName","shiftKey","command","stopPropagation","preventDefault","stop","context","register","allowWhere","allowChildren","disallowChildren","allowAttributes","allowAttributesOf","isBlock","addAttributeCheck","attributeName","getItem","isFormatting","getAttributeProperties","downcastDispatcher","on","priority","upcastDispatcher","insertionRange","targetRanges","toModelRange","start","dataTransfer","getData","UpcastWriter","content","plugins","has","ClipboardPipeline","contentRange","createRangeIn","hasSameParentAs","focus","docFragment","return","childCount","containsEntireContent","getAttributes","append","newDocumentFragment","getChild","checkAttribute","indent","outdent","registerChildCommand","positionParent","getLastPosition","leaveBlockStartOnEnter","isSoft","leaveBlockEndOnEnter","breakLineOnEnter","_initAriaAnnouncements","ui","lastFocusedCodeBlock","focusParent","ariaLiveAnnouncer","announce","modelDoc","lastSelectionPosition","insertText","isSoftEnter","isAtStart","isSoftBreakNode","newBlock","setSelection","scrollToTheSelection","emptyLineRangeToRemoveOnEnter","isAtEnd","isEmptyishTextNode","CodeBlockUI","componentFactory","normalizedLanguageDefs","itemDefinitions","_getLanguageListItemDefinitions","locale","dropdownView","createDropdown","SplitButtonView","splitButtonView","buttonView","accessibleLabel","set","tooltip","icon","icons","isToggleable","bind","to","source","_codeBlockLanguage","addListToDropdown","role","ariaLabel","menuView","MenuBarMenuView","listView","MenuBarMenuListView","definition","listItemView","MenuBarMenuListItemView","MenuBarMenuListItemButtonView","Object","keys","delegate","children","panelView","Collection","languageDef","type","ViewModel","withText","CodeBlock"],"mappings":"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C,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;AAC/F,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;AAC/F,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;AAC/F,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;AAC5G,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;AAC5G,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;AAC5G,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;AAC5G,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;AACpE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;AACpE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AACvG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AACvG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;AAC1G,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;AACpE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;AACpE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;AACpE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;AACpE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AACvH,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;ACsEL,CAAA,CAAA,CAAA,CACM,QAAA,CAASuE,sBAAwBlB,CAAAA,QAAkB,CAAA,CAAEjB,KAAY,CAAA,CAAA,CAAA;ADrExE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;AAC5E,CAAC,CAAC,CAAC,CCsEF,EAAKiB,CAAAA,CAAAA,QAAAA,CAASpC,QAAQ,CAAG,CAAA,CAAA;AACxBoC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,QAAAA,CAAWjB,CAAAA,CAAAA,KAAMoC,CAAAA,oBAAoB,CAAEnB,QAAAA,CAASpC,QAAQ,CAAA,CAAA;AACzD,CAAA,CAAA,CAAA,CAAA,CAAA;ADrED,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC;AAC5G,CAAC,CAAC,CAAC,CCuEF,KAAA,CAAQoC,QAAAA,CAASoB,UAAU,CAAA,CAAA,CAAA,CAAI,CAACpB,QAAAA,CAASoB,UAAU,CAACxB,EAAE,CAAE,CAAA,OAAA,CAAA,CAAW,CAAA,CAAA,SAAA,CAAgB,CAAA,CAAA,CAAA;AAClFI,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,QAAAA,CAAWjB,CAAAA,CAAAA,KAAMoC,CAAAA,oBAAoB,CAAEnB,QAAAA,CAASoB,UAAU,CAAA,CAAA;AAC3D,CAAA,CAAA,CAAA,CAAA,CAAA;ADtED,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC;AAC9D,CAAC,CAAC,CAAC,CCwEF,KAAA,CAAMC,WAAAA,CAAAA,CAAAA,CAAcrB,QAAAA,CAASsB,SAAS,CAAA;AAEtC,CAAA,CAAA,CAAA,CAAA,MAAOD,CAAAA,WAAeA,CAAAA,CAAAA,CAAAA,CAAAA,WAAAA,CAAYzB,EAAE,CAAE,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAYyB,WAAc,CAAA,CAAA,CAAA,IAAA,CAAA;AACjE,CAAA;ADxEA;AEnQA,CAAA,CAAA,CAAA;AFqQA,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;AACjC,CAAC,CAAC,CAAC,CEnQY,KAAME,CAAAA,gBAAyBC,CAAAA,OAAAA,CAAAA,OAAAA,CAAAA,CAAAA;AAC7C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AFoQD,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;AElQlC,CAAA,CAAA,CAAA,CAAA,CACD,aAAqC,CAAA;AASrC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AF2PD,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU;AACf,CEzPCC,CAAAA,CAAAA,CAAAA,CAAAA,WAAAA,CAAa/E,MAAc,CAAG,CAAA;AAC7B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAK,CAAEA,MAAAA,CAAAA,CAAAA;AF0PT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CExPL,IAAI,CAACgF,aAAa,CAAA,CAAA,CAAG,IAAA,CAAA;AACtB,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AFwPD,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU;AEtPb,CAAA,CAAA,CAAA,CAAA,CACD,OAAgC,CAAA,CAAA,CAAA,CAAA;AAC/B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAI,CAACpE,KAAK,CAAA,CAAA,CAAG,IAAI,CAACqE,SAAS,CAAA,CAAA,CAAA;AAC3B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAI,CAACC,SAAS,CAAA,CAAA,CAAG,IAAI,CAACC,aAAa,CAAA,CAAA,CAAA;AACpC,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AFsPD,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM;AAC/F,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG;AAC1F,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;AAC5B,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;AACzH,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC;AACnH,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,yBAAyB,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,OAAO;AACtH,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC;AEpPhH,CAAA,CAAA,CAAA,CAAA,CACD,OAAgBC,CAASC,OAIrB,CAAA,CAAA,CAAA,CAAA,CAAE,CAAS,CAAA,CAAA;AFiPhB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CEhPL,KAAA,CAAMrF,MAAAA,CAAAA,CAAAA,CAAS,IAAI,CAACA,MAAM,CAAA;AFiP5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CEhPL,KAAA,CAAMqC,KAAAA,CAAAA,CAAAA,CAAQrC,MAAAA,CAAOqC,KAAK,CAAA;AAC1B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMC,SAAYD,CAAAA,CAAAA,CAAAA,KAAAA,CAAME,QAAQ,CAACD,SAAS,CAAA;AAC1C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMgD,uBAAAA,CAAAA,CAAAA,CAA0BvF,4CAA8CC,CAAAA,MAAAA,CAAAA,CAAAA;AFiPhF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CEhPL,KAAA,CAAMuF,qBAAAA,CAAAA,CAAAA,CAAwBD,uBAAuB,CAAE,CAAG,CAAA,CAAA;AAE1D,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAME,CAAAA,MAASC,CAAAA,CAAAA,CAAAA,KAAAA,CAAMC,IAAI,CAAEpD,SAAAA,CAAUwB,iBAAiB,CAAA,CAAA,CAAA,CAAA;AFgPxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CE/OL,KAAA,CAAMlD,KAAAA,CAAAA,CAAAA,CAAQyE,OAAQM,CAAAA,UAAU,CAAInF,CAAAA,CAAAA,CAAAA,SAAAA,CAAY,CAAA,CAAA,CAAC,IAAI,CAACI,KAAK,CAAA,CAAA,CAAGyE,OAAAA,CAAQM,UAAU,CAAA;AFgPlF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CE/OL,KAAMlF,CAAAA,QAAAA,CAAWmF,CAAAA,CAAAA,WAAAA,CAAaP,OAAS,CAAA,CAAA,IAAI,CAACL,aAAa,CAAEO,CAAAA,qBAAAA,CAAsB9E,QAAQ,CAAA,CAAA;AFgP3F,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CE9OL4B,KAAMwD,CAAAA,MAAM,CAAEvE,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AACb,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAKV,KAAQ,CAAA,CAAA,CAAA;AACZ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAI,CAACkF,eAAe,CAAExE,MAAAA,CAAAA,CAAQkE,MAAQ/E,CAAAA,CAAAA,QAAAA,CAAAA,CAAAA;AF+O1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CE9OF,CAAA,IAAA,CAAA,CAAA;AF+OV,CE9OI,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAI,CAACsF,gBAAgB,CAAEzE,MAAQkE,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA;AAChC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AF8OD,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC;AE5O7B,CAAA,CAAA,CAAA,CAAA,CACD,SAAoC,CAAA,CAAA,CAAA,CAAA;AF6OrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CE5OL,KAAMlD,CAAAA,SAAAA,CAAY,CAAA,CAAA,IAAI,CAACtC,MAAM,CAACqC,KAAK,CAACE,QAAQ,CAACD,SAAS,CAAA;AF6OxD,CE5OE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMsB,UAAAA,CAAAA,CAAAA,CAAaC,KAAOvB,CAAAA,SAAAA,CAAUwB,iBAAiB,CAAA,CAAA,CAAA,CAAA;AF6OvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CE5OL,KAAA,CAAMkC,WAAAA,CAAAA,CAAAA,CAAc,CAAC,CAAA,CAAGpC,UAAAA,CAAcA,CAAAA,CAAAA,CAAAA,UAAWV,CAAAA,EAAE,CAAE,CAAA,OAAA,CAAA,CAAA,CAAW,CAAY,SAAA,CAAA,CAAA,CAAA,CAAA;AAE5E,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAO8C,WAAcpC,CAAAA,CAAAA,CAAAA,UAAAA,CAAWW,YAAY,CAAE,CAAyB,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA;AACxE,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AF2OD,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC;AACrE,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC;AEzOjD,CAAA,CAAA,CAAA,CAAA,CACD,aAAiC,CAAA,CAAA,CAAA,CAAA;AF0OlC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CEzOL,EAAK,CAAA,CAAA,IAAI,CAAC3D,KAAK,CAAG,CAAA,CAAA;AF0OpB,CEzOG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAO,IAAA,CAAA;AACR,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AF0OF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CExOL,KAAM0B,CAAAA,SAAAA,CAAY,CAAA,CAAA,IAAI,CAACtC,MAAM,CAACqC,KAAK,CAACE,QAAQ,CAACD,SAAS,CAAA;AACtD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAM0B,MAAAA,CAAAA,CAAAA,CAAS,IAAI,CAAChE,MAAM,CAACqC,KAAK,CAAC2B,MAAM,CAAA;AFyOzC,CEvOE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMJ,UAAAA,CAAAA,CAAAA,CAAaC,KAAOvB,CAAAA,SAAAA,CAAUwB,iBAAiB,CAAA,CAAA,CAAA,CAAA;AAErD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAK,CAACF,UAAa,CAAA,CAAA,CAAA;AFuOrB,CEtOG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAO,KAAA,CAAA;AACR,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAOG,cAAAA,CAAgBC,MAAQJ,CAAAA,CAAAA,UAAAA,CAAAA,CAAAA;AAChC,CAAA,CAAA,CAAA,CAAA,CAAA;AAEQkC,CAAAA,CAAAA,CAAAA,CAAAA,eAAAA,CAAiBxE,MAAc,CAAA,CAAEkE,MAAsB,CAAA,CAAE/E,QAAgB,CAAS,CAAA,CAAA;AFqO3F,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CEpOL,IAAI,CAACuE,aAAa,CAAA,CAAA,CAAGvE,QAAAA,CAAAA;AAErB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMuD,MAAAA,CAAAA,CAAAA,CAAS,IAAI,CAAChE,MAAM,CAACqC,KAAK,CAAC2B,MAAM,CAAA;AACvC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMiC,aAAAA,CAAAA,CAAAA,CAAgBT,MAAOU,CAAAA,MAAM,CAAEC,CAAAA,KAAAA,CAAAA,CAAAA,CAASpC,cAAAA,CAAgBC,MAAQmC,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA;AFoOxE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CElOL,GAAM,CAAA,CAAA,KAAA,CAAMA,KAAAA,CAAAA,EAAAA,CAASF,aAAgB,CAAA,CAAA;AFmOvC,CElOG3E,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAO8E,CAAAA,MAAM,CAAED,KAAO,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAAA;AFmOzB,CElOG7E,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAO+E,CAAAA,YAAY,CAAE,CAAA,QAAA,CAAA,CAAA,CAAY5F,QAAU0F,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AAC3CnC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,CAAOsC,0BAA0B,CAAE,CAAA;AAAEH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA;AFoOxC,CEpO+C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAE7E,MAAAA,CAAAA,CAAAA;AFqOjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;AAC3F,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CEnORmE,KAAMC,CAAAA,IAAI,CAAES,KAAMI,CAAAA,WAAW,CAAA,CAAA,CAAA,CAC3BL,MAAM,CAAEM,CAAAA,KAAS,CAAA,CAAA,CAAA,CAACxC,MAAAA,CAAOG,UAAU,CAAEgC,KAAAA,CAAAA,CAAOK,KAC5CC,CAAAA,CAAAA,CAAAA,OAAO,CAAED,CAAAA,KAAAA,CAAAA,CAAAA,CAASlF,MAAOoF,CAAAA,MAAM,CAAEF,KAAAA,CAAAA,CAAAA,CAAAA;AACpC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAEAP,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,aAAAA,CAAcU,OAAO,CAAA,CAAA,CAAGF,OAAO,CAAE,CAAEG,YAAcC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAChD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMC,SAAYb,CAAAA,CAAAA,CAAAA,aAAa,CAAEY,CAAAA,CAAAA,CAAAA,CAAI,CAAG,CAAA,CAAA;AFiO3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CE/NR,EAAA,CAAA,CAAKD,YAAAA,CAAaxD,eAAe,CAAA,CAAA,CAAA,CAAA,CAAK0D,SAAY,CAAA,CAAA,CAAA;AFgOrD,CE/NIxF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAOyF,CAAAA,aAAa,CAAE,CAAA,SAAA,CAAaD,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA;AACnCxF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,CAAO0F,KAAK,CAAE1F,MAAOmD,CAAAA,oBAAoB,CAAEmC,YAAAA,CAAAA,CAAAA,CAAAA;AAC5C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA;AFgOD,CAAC,CAAC,CAAC,CE9NMb,gBAAkBzE,CAAAA,MAAc,CAAA,CAAEkE,MAAsB,CAAS,CAAA,CAAA;AF+N1E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CE9NL,KAAA,CAAMyB,UAAAA,CAAAA,CAAAA,CAAazB,MAAAA,CAAOU,MAAM,CAAEC,CAAAA,KAASA,CAAAA,CAAAA,CAAAA,KAAAA,CAAMjD,EAAE,CAAE,CAAA,OAAA,CAAW,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA;AF+NlE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CE7NL,GAAM,CAAA,CAAA,KAAA,CAAMiD,KAAAA,CAAAA,EAAAA,CAASc,UAAa,CAAA,CAAA;AF8NpC,CE7NG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMC,KAAAA,CAAQ5F,CAAAA,CAAAA,MAAO6F,CAAAA,aAAa,CAAEhB,KAAAA,CAAAA,CAAAA;AF8NvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CE5NR,GAAA,CAAA,CAAM,KAAMnD,CAAAA,IAAAA,CAAQyC,EAAAA,CAAAA,KAAMC,CAAAA,IAAI,CAAEwB,KAAME,CAAAA,QAAQ,CAAKT,CAAAA,CAAAA,CAAAA,OAAO,CAAA,CAAK,CAAA,CAAA;AF6NlE,CE5NI,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAK3D,IAAAA,CAAKE,EAAE,CAAE,CAAW,OAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAiBF,IAAKG,CAAAA,MAAM,CAAED,EAAE,CAAE,CAAA,OAAA,CAAA,CAAW,CAAA,CAAA,SAAA,CAAgB,CAAA,CAAA,CAAA,CAAA;AF6N1F,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CE5Nd,KAAA,CAAM,CAAEI,CAAAA,QAAQ,CAAE,CAAA,CAAA,CAAA,CAAGhC,MAAAA,CAAOP,KAAK,CAAEO,MAAOmD,CAAAA,oBAAoB,CAAEzB,IAAAA,CAAAA,CAAAA,CAAAA;AF6NrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CE5Nd,KAAA,CAAMqE,YAAAA,CAAAA,CAAAA,CAAe/D,QAAAA,CAASsB,SAAS,CAAA;AF6N5C,CE3NKtD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAO8E,CAAAA,MAAM,CAAEiB,YAAc,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAAA;AF4NlC,CE3NK/F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAOgG,CAAAA,eAAe,CAAE,CAAA,QAAA,CAAYD,CAAAA,CAAAA,YAAAA,CAAAA,CAAAA;AACpC/F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,CAAOoF,MAAM,CAAE1D,IAAAA,CAAAA,CAAAA;AAChB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AF4NH,CE1NG1B,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAO8E,CAAAA,MAAM,CAAED,KAAO,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAAA;AF2NzB,CE1NG7E,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAOgG,CAAAA,eAAe,CAAE,CAAA,QAAA,CAAYnB,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AACrC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA;AAEA,CAAA,CAAA,CAAA;AF0NA,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC;AACrF,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,yBAAyB,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI;AAClF,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI;AACjF,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;AExNrE,CACD,CAAA,CAAA,CAAA,QAAA,CAASP,WACRP,CAAAA,OAAmE,CAAA,CACnEkC,YAA2B,CAAA,CAC3BC,eAAuB,CAAA,CAAA,CAAA;AFsNxB,CAAC,CAAC,CAAC,CEpNF,EAAKnC,CAAAA,CAAAA,OAAAA,CAAQ5E,QAAQ,CAAG,CAAA,CAAA;AACvB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAO4E,CAAAA,OAAAA,CAAQ5E,QAAQ,CAAA;AACxB,CAAA,CAAA,CAAA,CAAA,CAAA;AFqND,CAAC,CAAC,CAAC,CEnNF,EAAA,CAAA,CAAK4E,OAAAA,CAAQoC,yBAAyB,CAAA,CAAA,CAAA,CAAIF,YAAe,CAAA,CAAA,CAAA;AFoN1D,CEnNE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAOA,YAAAA,CAAAA;AACR,CAAA,CAAA,CAAA,CAAA,CAAA;AFoND,CElNC,CAAA,CAAA,CAAA,MAAA,CAAOC,eAAAA,CAAAA;AACR,CAAA;AFmNA;AGlYA,CAAA,CAAA,CAAA;AHoYA,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC;AACtD,CAAC,CAAC,CAAC,CGlYY,KAAME,CAAAA,sBAA+B5C,CAAAA,OAAAA,CAAAA,OAAAA,CAAAA,CAAAA;AACnD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AHmYD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,CAAC;AGjY1E,CAAA,CAAA,CAAA,CAAA,CACD,eAAgC,CAAA;AAEhCC,CAAAA,CAAAA,CAAAA,CAAAA,WAAAA,CAAa/E,MAAc,CAAG,CAAA;AAC7B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAK,CAAEA,MAAAA,CAAAA,CAAAA;AAEP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAI,CAAC2H,eAAe,CAAA,CAAA,CAAG3H,MAAAA,CAAOG,MAAM,CAACC,GAAG,CAAE,CAAA,SAAA,CAAA,cAAA,CAAA,CAAA,CAAA;AAC3C,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AH+XD,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU;AG7Xb,CAAA,CAAA,CAAA,CAAA,CACD,OAAgC,CAAA,CAAA,CAAA,CAAA;AAC/B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAI,CAAC8E,SAAS,CAAA,CAAA,CAAG,IAAI,CAACC,aAAa,CAAA,CAAA,CAAA;AACpC,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AH6XD,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,GAAG;AAChG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC;AAClD,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO;AG3XhB,CAAA,CAAA,CAAA,CAAA,CACD,OAAgC,CAAA,CAAA,CAAA,CAAA;AH4XjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CG3XL,KAAA,CAAMnF,MAAAA,CAAAA,CAAAA,CAAS,IAAI,CAACA,MAAM,CAAA;AH4X5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CG3XL,KAAA,CAAMqC,KAAAA,CAAAA,CAAAA,CAAQrC,MAAAA,CAAOqC,KAAK,CAAA;AH4X5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CG1XLA,KAAMwD,CAAAA,MAAM,CAAEvE,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AACb,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMkB,SAAAA,CAAAA,CAAAA,CAAYJ,yBAA2BC,CAAAA,KAAAA,CAAAA,CAAAA;AH2XhD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;AAC1F,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;AAC7F,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;AAC1D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CA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AC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAA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CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;ANy0BJ,CMz0BMG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,QAAU,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA;AN00BhB,CM10BwBH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAO,CAAA,CAAA,CAAA,IAAA,CAAA;AAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAClC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AN40BJ,CM50BMG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,QAAU,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA;AN60BhB,CM70BwBH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAO,CAAA,CAAA,CAAA,IAAA,CAAA;AAAO,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAClC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AN+0BJ,CM/0BMG,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA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","file":"index.js.map","sourcesContent":["import { Command, Plugin, icons } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { ShiftEnter } from '@ckeditor/ckeditor5-enter/dist/index.js';\nimport { UpcastWriter } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { ClipboardPipeline } from '@ckeditor/ckeditor5-clipboard/dist/index.js';\nimport { first, Collection } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { createDropdown, SplitButtonView, addListToDropdown, MenuBarMenuView, MenuBarMenuListView, MenuBarMenuListItemView, MenuBarMenuListItemButtonView, ViewModel } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * Returns code block languages as defined in `config.codeBlock.languages` but processed:\n *\n * * To consider the editor localization, i.e. to display {@link module:code-block/codeblockconfig~CodeBlockLanguageDefinition}\n * in the correct language. There is no way to use {@link module:utils/locale~Locale#t} when the user\n * configuration is defined because the editor does not exist yet.\n * * To make sure each definition has a CSS class associated with it even if not specified\n * in the original configuration.\n */ function getNormalizedAndLocalizedLanguageDefinitions(editor) {\n    const t = editor.t;\n    const languageDefs = editor.config.get('codeBlock.languages');\n    for (const def of languageDefs){\n        if (def.label === 'Plain text') {\n            def.label = t('Plain text');\n        }\n        if (def.class === undefined) {\n            def.class = `language-${def.language}`;\n        }\n    }\n    return languageDefs;\n}\n/**\n * Returns an object associating certain language definition properties with others. For instance:\n *\n * For:\n *\n * ```ts\n * const definitions = {\n * \t{ language: 'php', class: 'language-php', label: 'PHP' },\n * \t{ language: 'javascript', class: 'js', label: 'JavaScript' },\n * };\n *\n * getPropertyAssociation( definitions, 'class', 'language' );\n * ```\n *\n * returns:\n *\n * ```ts\n * {\n * \t'language-php': 'php',\n * \t'js': 'javascript'\n * }\n * ```\n *\n * and\n *\n * ```ts\n * getPropertyAssociation( definitions, 'language', 'label' );\n * ```\n *\n * returns:\n *\n * ```ts\n * {\n * \t'php': 'PHP',\n * \t'javascript': 'JavaScript'\n * }\n * ```\n */ function getPropertyAssociation(languageDefs, key, value) {\n    const association = {};\n    for (const def of languageDefs){\n        if (key === 'class') {\n            // Only the first class is considered.\n            const newKey = def[key].split(' ').shift();\n            association[newKey] = def[value];\n        } else {\n            association[def[key]] = def[value];\n        }\n    }\n    return association;\n}\n/**\n * For a given model text node, it returns white spaces that precede other characters in that node.\n * This corresponds to the indentation part of the code block line.\n */ function getLeadingWhiteSpaces(textNode) {\n    return textNode.data.match(/^(\\s*)/)[0];\n}\n/**\n * For plain text containing the code (a snippet), it returns a document fragment containing\n * view text nodes separated by `<br>` elements (in place of new line characters \"\\n\"), for instance:\n *\n * Input:\n *\n * ```ts\n * \"foo()\\n\n * bar()\"\n * ```\n *\n * Output:\n *\n * ```html\n * <DocumentFragment>\n * \t\"foo()\"\n * \t<br/>\n * \t\"bar()\"\n * </DocumentFragment>\n * ```\n *\n * @param text The raw code text to be converted.\n */ function rawSnippetTextToViewDocumentFragment(writer, text) {\n    const fragment = writer.createDocumentFragment();\n    const textLines = text.split('\\n');\n    const items = textLines.reduce((nodes, line, lineIndex)=>{\n        nodes.push(line);\n        if (lineIndex < textLines.length - 1) {\n            nodes.push(writer.createElement('br'));\n        }\n        return nodes;\n    }, []);\n    writer.appendChild(items, fragment);\n    return fragment;\n}\n/**\n * Returns an array of all model positions within the selection that represent code block lines.\n *\n * If the selection is collapsed, it returns the exact selection anchor position:\n *\n * ```html\n * <codeBlock>[]foo</codeBlock>        ->     <codeBlock>^foo</codeBlock>\n * <codeBlock>foo[]bar</codeBlock>     ->     <codeBlock>foo^bar</codeBlock>\n * ```\n *\n * Otherwise, it returns positions **before** each text node belonging to all code blocks contained by the selection:\n *\n * ```html\n * <codeBlock>                                <codeBlock>\n *     foo[bar                                   ^foobar\n *     <softBreak></softBreak>         ->        <softBreak></softBreak>\n *     baz]qux                                   ^bazqux\n * </codeBlock>                               </codeBlock>\n * ```\n *\n * It also works across other non–code blocks:\n *\n * ```html\n * <codeBlock>                                <codeBlock>\n *     foo[bar                                   ^foobar\n * </codeBlock>                               </codeBlock>\n * <paragraph>text</paragraph>         ->     <paragraph>text</paragraph>\n * <codeBlock>                                <codeBlock>\n *     baz]qux                                   ^bazqux\n * </codeBlock>                               </codeBlock>\n * ```\n *\n * **Note:** The positions are in reverse order so they do not get outdated when iterating over them and\n * the writer inserts or removes elements at the same time.\n *\n * **Note:** The position is located after the leading white spaces in the text node.\n */ function getIndentOutdentPositions(model) {\n    const selection = model.document.selection;\n    const positions = [];\n    // When the selection is collapsed, there's only one position we can indent or outdent.\n    if (selection.isCollapsed) {\n        return [\n            selection.anchor\n        ];\n    }\n    // When the selection is NOT collapsed, collect all positions starting before text nodes\n    // (code lines) in any <codeBlock> within the selection.\n    // Walk backward so positions we are about to collect here do not get outdated when\n    // inserting or deleting using the writer.\n    const walker = selection.getFirstRange().getWalker({\n        ignoreElementEnd: true,\n        direction: 'backward'\n    });\n    for (const { item } of walker){\n        let node = item.is('$textProxy') ? item.textNode : item;\n        const parent = node.parent;\n        if (!parent.is('element', 'codeBlock') || node.is('element', 'softBreak')) {\n            continue;\n        }\n        // For each item in code block, move backwards until the beginning of the line it is in is found.\n        while(node.previousSibling && !node.previousSibling.is('element', 'softBreak')){\n            node = node.previousSibling;\n        }\n        // Take the leading white spaces into account (only for text nodes).\n        const startOffset = !node.is('$text') ? node.startOffset : node.startOffset + getLeadingWhiteSpaces(node).length;\n        const position = model.createPositionAt(parent, startOffset);\n        // Do not add the same position twice. Unfortunately using set doesn't deduplicate positions because\n        // they are different objects.\n        if (positions.every((pos)=>!pos.isEqual(position))) {\n            positions.push(position);\n        }\n    }\n    return positions;\n}\n/**\n * Checks if any of the blocks within the model selection is a code block.\n */ function isModelSelectionInCodeBlock(selection) {\n    const firstBlock = first(selection.getSelectedBlocks());\n    return !!firstBlock && firstBlock.is('element', 'codeBlock');\n}\n/**\n * Checks if an {@link module:engine/model/element~Element Element} can become a code block.\n *\n * @param schema Model's schema.\n * @param element The element to be checked.\n * @returns Check result.\n */ function canBeCodeBlock(schema, element) {\n    if (element.is('rootElement') || schema.isLimit(element)) {\n        return false;\n    }\n    return schema.checkChild(element.parent, 'codeBlock');\n}\n/**\n * Get the translated message read by the screen reader when you enter or exit an element with your cursor.\n */ function getCodeBlockAriaAnnouncement(t, languageDefs, element, direction) {\n    const languagesToLabels = getPropertyAssociation(languageDefs, 'language', 'label');\n    const codeBlockLanguage = element.getAttribute('language');\n    if (codeBlockLanguage in languagesToLabels) {\n        const language = languagesToLabels[codeBlockLanguage];\n        if (direction === 'enter') {\n            return t('Entering %0 code snippet', language);\n        }\n        return t('Leaving %0 code snippet', language);\n    }\n    if (direction === 'enter') {\n        return t('Entering code snippet');\n    }\n    return t('Leaving code snippet');\n}\n/**\n * For given position, finds the closest position that is at the beginning of a line of code and returns a text node that is at the\n * beginning of the line (or `null` if there's no text node at the beginning of a given line).\n *\n * Line beings at the start of a code block element and after each `softBreak` element.\n *\n * Note: even though code block doesn't allow inline elements other than `<softBreak>` by default, some features may overwrite this rule,\n * so such inline elements are taken into account.\n *\n * Some examples of expected results:\n *\n * ```\n * <codeBlock>^</codeBlock>                                ->   null\n * <codeBlock>^foobar</codeBlock>                          ->   <codeBlock>[foobar]</codeBlock>\n * <codeBlock>foobar^</codeBlock>                          ->   <codeBlock>[foobar]</codeBlock>\n * <codeBlock>foo^bar</codeBlock>                          ->   <codeBlock>[foobar]</codeBlock>\n * <codeBlock>foo^<softBreak />bar</codeBlock>             ->   <codeBlock>[foo]<softBreak />bar</codeBlock>\n * <codeBlock>foo<softBreak />bar^</codeBlock>             ->   <codeBlock>foo<softBreak />[bar]</codeBlock>\n * <codeBlock>foo<softBreak />b^ar</codeBlock>             ->   <codeBlock>foo<softBreak />[bar]</codeBlock>\n * <codeBlock>foo<softBreak />^bar</codeBlock>             ->   <codeBlock>foo<softBreak />[bar]</codeBlock>\n * <codeBlock>^<element /></codeBlock>                     ->   null\n * <codeBlock><element />^</codeBlock>                     ->   null\n * <codeBlock>foo^<element /></codeBlock>                  ->   <codeBlock>[foo]<element /></codeBlock>\n * <codeBlock>foo<element />^</codeBlock>                  ->   <codeBlock>[foo]<element /></codeBlock>\n * <codeBlock>foo<element />bar^</codeBlock>               ->   <codeBlock>[foo]<element />bar</codeBlock>\n * <codeBlock><element />bar^</codeBlock>                  ->   null\n * <codeBlock>foo<softBreak />^<softBreak /></codeBlock>   ->   null\n * <codeBlock>foo<softBreak />^<element /></codeBlock>     ->   null\n * <codeBlock>foo<softBreak /><element />^</codeBlock>     ->   null\n * <codeBlock>foo<softBreak />bar<element />^</codeBlock>  ->   <codeBlock>foo<softBreak />[bar]<element /></codeBlock>\n * <codeBlock>foo<softBreak /><element />ba^r</codeBlock>  ->   null\n * ```\n */ function getTextNodeAtLineStart(position, model) {\n    // First, move position before a text node, if it is inside a text node.\n    if (position.textNode) {\n        position = model.createPositionBefore(position.textNode);\n    }\n    // Then, jump-back the position until it is before a `softBreak` or at the beginning of the `codeBlock`.\n    while(position.nodeBefore && !position.nodeBefore.is('element', 'softBreak')){\n        position = model.createPositionBefore(position.nodeBefore);\n    }\n    // Now, the position is at the beginning of a line.\n    // Return a text node after the position, if there is one.\n    const nodeAtStart = position.nodeAfter;\n    return nodeAtStart && nodeAtStart.is('$text') ? nodeAtStart : null;\n}\n\n/**\n * The code block command plugin.\n */ class CodeBlockCommand extends Command {\n    /**\n\t * Contains the last used language.\n\t */ _lastLanguage;\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this._lastLanguage = null;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.value = this._getValue();\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the command. When the command {@link #value is on}, all topmost code blocks within\n\t * the selection will be removed. If it is off, all selected blocks will be flattened and\n\t * wrapped by a code block.\n\t *\n\t * @fires execute\n\t * @param options Command options.\n\t * @param options.language The code block language.\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will apply a code block,\n\t * otherwise the command will remove the code block. If not set, the command will act basing on its current value.\n\t * @param options.usePreviousLanguageChoice If set on `true` and the `options.language` is not specified, the command\n\t * will apply the previous language (if the command was already executed) when inserting the `codeBlock` element.\n\t */ execute(options = {}) {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        const normalizedLanguagesDefs = getNormalizedAndLocalizedLanguageDefinitions(editor);\n        const firstLanguageInConfig = normalizedLanguagesDefs[0];\n        const blocks = Array.from(selection.getSelectedBlocks());\n        const value = options.forceValue == undefined ? !this.value : options.forceValue;\n        const language = getLanguage(options, this._lastLanguage, firstLanguageInConfig.language);\n        model.change((writer)=>{\n            if (value) {\n                this._applyCodeBlock(writer, blocks, language);\n            } else {\n                this._removeCodeBlock(writer, blocks);\n            }\n        });\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */ _getValue() {\n        const selection = this.editor.model.document.selection;\n        const firstBlock = first(selection.getSelectedBlocks());\n        const isCodeBlock = !!(firstBlock && firstBlock.is('element', 'codeBlock'));\n        return isCodeBlock ? firstBlock.getAttribute('language') : false;\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        if (this.value) {\n            return true;\n        }\n        const selection = this.editor.model.document.selection;\n        const schema = this.editor.model.schema;\n        const firstBlock = first(selection.getSelectedBlocks());\n        if (!firstBlock) {\n            return false;\n        }\n        return canBeCodeBlock(schema, firstBlock);\n    }\n    _applyCodeBlock(writer, blocks, language) {\n        this._lastLanguage = language;\n        const schema = this.editor.model.schema;\n        const allowedBlocks = blocks.filter((block)=>canBeCodeBlock(schema, block));\n        for (const block of allowedBlocks){\n            writer.rename(block, 'codeBlock');\n            writer.setAttribute('language', language, block);\n            schema.removeDisallowedAttributes([\n                block\n            ], writer);\n            // Remove children of the  `codeBlock` element that are not allowed. See #9567.\n            Array.from(block.getChildren()).filter((child)=>!schema.checkChild(block, child)).forEach((child)=>writer.remove(child));\n        }\n        allowedBlocks.reverse().forEach((currentBlock, i)=>{\n            const nextBlock = allowedBlocks[i + 1];\n            if (currentBlock.previousSibling === nextBlock) {\n                writer.appendElement('softBreak', nextBlock);\n                writer.merge(writer.createPositionBefore(currentBlock));\n            }\n        });\n    }\n    _removeCodeBlock(writer, blocks) {\n        const codeBlocks = blocks.filter((block)=>block.is('element', 'codeBlock'));\n        for (const block of codeBlocks){\n            const range = writer.createRangeOn(block);\n            for (const item of Array.from(range.getItems()).reverse()){\n                if (item.is('element', 'softBreak') && item.parent.is('element', 'codeBlock')) {\n                    const { position } = writer.split(writer.createPositionBefore(item));\n                    const elementAfter = position.nodeAfter;\n                    writer.rename(elementAfter, 'paragraph');\n                    writer.removeAttribute('language', elementAfter);\n                    writer.remove(item);\n                }\n            }\n            writer.rename(block, 'paragraph');\n            writer.removeAttribute('language', block);\n        }\n    }\n}\n/**\n * Picks the language for the new code block. If any language is passed as an option,\n * it will be returned. Else, if option usePreviousLanguageChoice is true and some\n * code block was already created (lastLanguage is not null) then previously used\n * language will be returned. If not, it will return default language.\n */ function getLanguage(options, lastLanguage, defaultLanguage) {\n    if (options.language) {\n        return options.language;\n    }\n    if (options.usePreviousLanguageChoice && lastLanguage) {\n        return lastLanguage;\n    }\n    return defaultLanguage;\n}\n\n/**\n * The code block indentation increase command plugin.\n */ class IndentCodeBlockCommand extends Command {\n    /**\n\t * A sequence of characters added to the line when the command is executed.\n\t */ _indentSequence;\n    constructor(editor){\n        super(editor);\n        this._indentSequence = editor.config.get('codeBlock.indentSequence');\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the command. When the command {@link #isEnabled is enabled}, the indentation of the\n\t * code lines in the selection will be increased.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const editor = this.editor;\n        const model = editor.model;\n        model.change((writer)=>{\n            const positions = getIndentOutdentPositions(model);\n            // Indent all positions, for instance assuming the indent sequence is 4x space (\"    \"):\n            //\n            //\t\t<codeBlock>^foo</codeBlock>        ->       <codeBlock>    foo</codeBlock>\n            //\n            //\t\t<codeBlock>foo^bar</codeBlock>     ->       <codeBlock>foo    bar</codeBlock>\n            //\n            // Also, when there is more than one position:\n            //\n            //\t\t<codeBlock>\n            //\t\t\t^foobar\n            //\t\t\t<softBreak></softBreak>\n            //\t\t\t^bazqux\n            //\t\t</codeBlock>\n            //\n            //\t\t->\n            //\n            //\t\t<codeBlock>\n            //\t\t\t    foobar\n            //\t\t\t<softBreak></softBreak>\n            //\t\t\t    bazqux\n            //\t\t</codeBlock>\n            //\n            for (const position of positions){\n                const indentSequenceTextElement = writer.createText(this._indentSequence);\n                // Previously insertion was done by writer.insertText(). It was changed to insertContent() to enable\n                // integration of code block with track changes. It's the easiest way of integration because insertContent()\n                // is already integrated with track changes, but if it ever cause any troubles it can be reverted, however\n                // some additional work will be required in track changes integration of code block.\n                model.insertContent(indentSequenceTextElement, position);\n            }\n        });\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t */ _checkEnabled() {\n        if (!this._indentSequence) {\n            return false;\n        }\n        // Indent (forward) command is always enabled when there's any code block in the selection\n        // because you can always indent code lines.\n        return isModelSelectionInCodeBlock(this.editor.model.document.selection);\n    }\n}\n\n/**\n * The code block indentation decrease command plugin.\n */ class OutdentCodeBlockCommand extends Command {\n    /**\n\t * A sequence of characters removed from the line when the command is executed.\n\t */ _indentSequence;\n    constructor(editor){\n        super(editor);\n        this._indentSequence = editor.config.get('codeBlock.indentSequence');\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the command. When the command {@link #isEnabled is enabled}, the indentation of the\n\t * code lines in the selection will be decreased.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const editor = this.editor;\n        const model = editor.model;\n        model.change(()=>{\n            const positions = getIndentOutdentPositions(model);\n            // Outdent all positions, for instance assuming the indent sequence is 4x space (\"    \"):\n            //\n            //\t\t<codeBlock>^foo</codeBlock>         ->       <codeBlock>foo</codeBlock>\n            //\n            //\t\t<codeBlock>    ^bar</codeBlock>     ->       <codeBlock>bar</codeBlock>\n            //\n            // Also, when there is more than one position:\n            //\n            //\t\t<codeBlock>\n            //\t\t\t    ^foobar\n            //\t\t\t<softBreak></softBreak>\n            //\t\t\t    ^bazqux\n            //\t\t</codeBlock>\n            //\n            //\t\t->\n            //\n            //\t\t<codeBlock>\n            //\t\t\tfoobar\n            //\t\t\t<softBreak></softBreak>\n            //\t\t\tbazqux\n            //\t\t</codeBlock>\n            for (const position of positions){\n                const range = getLastOutdentableSequenceRange(model, position, this._indentSequence);\n                if (range) {\n                    // Previously deletion was done by writer.remove(). It was changed to deleteContent() to enable\n                    // integration of code block with track changes. It's the easiest way of integration because deleteContent()\n                    // is already integrated with track changes, but if it ever cause any troubles it can be reverted, however\n                    // some additional work will be required in track changes integration of code block.\n                    model.deleteContent(model.createSelection(range));\n                }\n            }\n        });\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */ _checkEnabled() {\n        if (!this._indentSequence) {\n            return false;\n        }\n        const model = this.editor.model;\n        if (!isModelSelectionInCodeBlock(model.document.selection)) {\n            return false;\n        }\n        // Outdent command can execute only when there is an indent character sequence\n        // in some of the lines.\n        return getIndentOutdentPositions(model).some((position)=>{\n            return getLastOutdentableSequenceRange(model, position, this._indentSequence);\n        });\n    }\n}\n// For a position coming from `getIndentOutdentPositions()`, it returns the range representing\n// the last occurrence of the indent sequence among the leading whitespaces of the code line the\n// position represents.\n//\n// For instance, assuming the indent sequence is 4x space (\"    \"):\n//\n//\t\t<codeBlock>foo^</codeBlock>                                 ->          null\n//\t\t<codeBlock>foo^<softBreak></softBreak>bar</codeBlock>       ->          null\n//\t\t<codeBlock>  ^foo</codeBlock>                               ->          null\n//\t\t<codeBlock>        ^foo</codeBlock>                         ->          <codeBlock>    [    ]foo</codeBlock>\n//\t\t<codeBlock>    ^foo    bar</codeBlock>                      ->          <codeBlock>[    ]foo    bar</codeBlock>\n//\n// @param {<module:engine/model/model~Model>} model\n// @param {<module:engine/model/position~Position>} position\n// @param {String} sequence\n// @returns {<module:engine/model/range~Range>|null}\nfunction getLastOutdentableSequenceRange(model, position, sequence) {\n    // Positions start before each text node (code line). Get the node corresponding to the position.\n    const nodeAtPosition = getTextNodeAtLineStart(position, model);\n    if (!nodeAtPosition) {\n        return null;\n    }\n    const leadingWhiteSpaces = getLeadingWhiteSpaces(nodeAtPosition);\n    const lastIndexOfSequence = leadingWhiteSpaces.lastIndexOf(sequence);\n    // For instance, assuming the indent sequence is 4x space (\"    \"):\n    //\n    //\t\t<codeBlock>    \t^foo</codeBlock>           ->             null\n    //\n    if (lastIndexOfSequence + sequence.length !== leadingWhiteSpaces.length) {\n        return null;\n    }\n    // For instance, assuming the indent sequence is 4x space (\"    \"):\n    //\n    //\t\t<codeBlock>  ^foo</codeBlock>           ->             null\n    //\n    if (lastIndexOfSequence === -1) {\n        return null;\n    }\n    const { parent, startOffset } = nodeAtPosition;\n    // Create a range that contains the **last** indent sequence among the leading whitespaces\n    // of the line.\n    //\n    // For instance, assuming the indent sequence is 4x space (\"    \"):\n    //\n    //\t\t<codeBlock>        ^foo</codeBlock>      ->     <codeBlock>    [    ]foo</codeBlock>\n    //\n    return model.createRange(model.createPositionAt(parent, startOffset + lastIndexOfSequence), model.createPositionAt(parent, startOffset + lastIndexOfSequence + sequence.length));\n}\n\n/**\n * A model-to-view (both editing and data) converter for the `codeBlock` element.\n *\n * Sample input:\n *\n * ```html\n * <codeBlock language=\"javascript\">foo();<softBreak></softBreak>bar();</codeBlock>\n * ```\n *\n * Sample output (editing):\n *\n * ```html\n * <pre data-language=\"JavaScript\"><code class=\"language-javascript\">foo();<br />bar();</code></pre>\n * ```\n *\n * Sample output (data, see {@link module:code-block/converters~modelToDataViewSoftBreakInsertion}):\n *\n * ```html\n * <pre><code class=\"language-javascript\">foo();\\nbar();</code></pre>\n * ```\n *\n * @param languageDefs The normalized language configuration passed to the feature.\n * @param useLabels When `true`, the `<pre>` element will get a `data-language` attribute with a\n * human–readable label of the language. Used only in the editing.\n * @returns Returns a conversion callback.\n */ function modelToViewCodeBlockInsertion(model, languageDefs, useLabels = false) {\n    // Language CSS classes:\n    //\n    //\t\t{\n    //\t\t\tphp: 'language-php',\n    //\t\t\tpython: 'language-python',\n    //\t\t\tjavascript: 'js',\n    //\t\t\t...\n    //\t\t}\n    const languagesToClasses = getPropertyAssociation(languageDefs, 'language', 'class');\n    // Language labels:\n    //\n    //\t\t{\n    //\t\t\tphp: 'PHP',\n    //\t\t\tpython: 'Python',\n    //\t\t\tjavascript: 'JavaScript',\n    //\t\t\t...\n    //\t\t}\n    const languagesToLabels = getPropertyAssociation(languageDefs, 'language', 'label');\n    return (evt, data, conversionApi)=>{\n        const { writer, mapper, consumable } = conversionApi;\n        if (!consumable.consume(data.item, 'insert')) {\n            return;\n        }\n        const codeBlockLanguage = data.item.getAttribute('language');\n        const targetViewPosition = mapper.toViewPosition(model.createPositionBefore(data.item));\n        const preAttributes = {};\n        // Attributes added only in the editing view.\n        if (useLabels) {\n            preAttributes['data-language'] = languagesToLabels[codeBlockLanguage];\n            preAttributes.spellcheck = 'false';\n        }\n        const codeAttributes = languagesToClasses[codeBlockLanguage] ? {\n            class: languagesToClasses[codeBlockLanguage]\n        } : undefined;\n        const code = writer.createContainerElement('code', codeAttributes);\n        const pre = writer.createContainerElement('pre', preAttributes, code);\n        writer.insert(targetViewPosition, pre);\n        mapper.bindElements(data.item, code);\n    };\n}\n/**\n * A model-to-data view converter for the new line (`softBreak`) separator.\n *\n * Sample input:\n *\n * ```html\n * <codeBlock ...>foo();<softBreak></softBreak>bar();</codeBlock>\n * ```\n *\n * Sample output:\n *\n * ```html\n * <pre><code ...>foo();\\nbar();</code></pre>\n * ```\n *\n * @returns Returns a conversion callback.\n */ function modelToDataViewSoftBreakInsertion(model) {\n    return (evt, data, conversionApi)=>{\n        if (data.item.parent.name !== 'codeBlock') {\n            return;\n        }\n        const { writer, mapper, consumable } = conversionApi;\n        if (!consumable.consume(data.item, 'insert')) {\n            return;\n        }\n        const position = mapper.toViewPosition(model.createPositionBefore(data.item));\n        writer.insert(position, writer.createText('\\n'));\n    };\n}\n/**\n * A view-to-model converter for `<pre>` with the `<code>` HTML.\n *\n * Sample input:\n *\n * ```html\n * <pre><code class=\"language-javascript\">foo();bar();</code></pre>\n * ```\n *\n * Sample output:\n *\n * ```html\n * <codeBlock language=\"javascript\">foo();bar();</codeBlock>\n * ```\n *\n * @param languageDefs The normalized language configuration passed to the feature.\n * @returns Returns a conversion callback.\n */ function dataViewToModelCodeBlockInsertion(editingView, languageDefs) {\n    // Language names associated with CSS classes:\n    //\n    //\t\t{\n    //\t\t\t'language-php': 'php',\n    //\t\t\t'language-python': 'python',\n    //\t\t\tjs: 'javascript',\n    //\t\t\t...\n    //\t\t}\n    const classesToLanguages = getPropertyAssociation(languageDefs, 'class', 'language');\n    const defaultLanguageName = languageDefs[0].language;\n    return (evt, data, conversionApi)=>{\n        const viewCodeElement = data.viewItem;\n        const viewPreElement = viewCodeElement.parent;\n        if (!viewPreElement || !viewPreElement.is('element', 'pre')) {\n            return;\n        }\n        // In case of nested code blocks we don't want to convert to another code block.\n        if (data.modelCursor.findAncestor('codeBlock')) {\n            return;\n        }\n        const { consumable, writer } = conversionApi;\n        if (!consumable.test(viewCodeElement, {\n            name: true\n        })) {\n            return;\n        }\n        const codeBlock = writer.createElement('codeBlock');\n        const viewChildClasses = [\n            ...viewCodeElement.getClassNames()\n        ];\n        // As we're to associate each class with a model language, a lack of class (empty class) can be\n        // also associated with a language if the language definition was configured so. Pushing an empty\n        // string to make sure the association will work.\n        if (!viewChildClasses.length) {\n            viewChildClasses.push('');\n        }\n        // Figure out if any of the <code> element's class names is a valid programming\n        // language class. If so, use it on the model element (becomes the language of the entire block).\n        for (const className of viewChildClasses){\n            const language = classesToLanguages[className];\n            if (language) {\n                writer.setAttribute('language', language, codeBlock);\n                break;\n            }\n        }\n        // If no language value was set, use the default language from the config.\n        if (!codeBlock.hasAttribute('language')) {\n            writer.setAttribute('language', defaultLanguageName, codeBlock);\n        }\n        conversionApi.convertChildren(viewCodeElement, codeBlock);\n        // Let's try to insert code block.\n        if (!conversionApi.safeInsert(codeBlock, data.modelCursor)) {\n            return;\n        }\n        consumable.consume(viewCodeElement, {\n            name: true\n        });\n        conversionApi.updateConversionResult(codeBlock, data);\n    };\n}\n/**\n * A view-to-model converter for new line characters in `<pre>`.\n *\n * Sample input:\n *\n * ```html\n * <pre><code class=\"language-javascript\">foo();\\nbar();</code></pre>\n * ```\n *\n * Sample output:\n *\n * ```html\n * <codeBlock language=\"javascript\">foo();<softBreak></softBreak>bar();</codeBlock>\n * ```\n *\n * @returns {Function} Returns a conversion callback.\n */ function dataViewToModelTextNewlinesInsertion() {\n    return (evt, data, { consumable, writer })=>{\n        let position = data.modelCursor;\n        // When node is already converted then do nothing.\n        if (!consumable.test(data.viewItem)) {\n            return;\n        }\n        // When not inside `codeBlock` then do nothing.\n        if (!position.findAncestor('codeBlock')) {\n            return;\n        }\n        consumable.consume(data.viewItem);\n        const text = data.viewItem.data;\n        const textLines = text.split('\\n').map((data)=>writer.createText(data));\n        const lastLine = textLines[textLines.length - 1];\n        for (const node of textLines){\n            writer.insert(node, position);\n            position = position.getShiftedBy(node.offsetSize);\n            if (node !== lastLine) {\n                const softBreak = writer.createElement('softBreak');\n                writer.insert(softBreak, position);\n                position = writer.createPositionAfter(softBreak);\n            }\n        }\n        data.modelRange = writer.createRange(data.modelCursor, position);\n        data.modelCursor = position;\n    };\n}\n/**\n * A view-to-model converter that handles orphan text nodes (white spaces, new lines, etc.)\n * that surround `<code>` inside `<pre>`.\n *\n * Sample input:\n *\n * ```html\n * // White spaces\n * <pre> <code>foo()</code> </pre>\n *\n * // White spaces\n * <pre>      <code>foo()</code>      </pre>\n *\n * // White spaces\n * <pre>\t\t\t<code>foo()</code>\t\t\t</pre>\n *\n * // New lines\n * <pre>\n * \t<code>foo()</code>\n * </pre>\n *\n * // Redundant text\n * <pre>ABC<code>foo()</code>DEF</pre>\n * ```\n *\n * Unified output for each case:\n *\n * ```html\n * <codeBlock language=\"plaintext\">foo()</codeBlock>\n * ```\n *\n * @returns Returns a conversion callback.\n */ function dataViewToModelOrphanNodeConsumer() {\n    return (evt, data, { consumable })=>{\n        const preElement = data.viewItem;\n        // Don't clean up nested pre elements. Their content should stay as it is, they are not upcasted\n        // to code blocks.\n        if (preElement.findAncestor('pre')) {\n            return;\n        }\n        const preChildren = Array.from(preElement.getChildren());\n        const childCodeElement = preChildren.find((node)=>node.is('element', 'code'));\n        // <code>-less <pre>. It will not upcast to code block in the model, skipping.\n        if (!childCodeElement) {\n            return;\n        }\n        for (const child of preChildren){\n            if (child === childCodeElement || !child.is('$text')) {\n                continue;\n            }\n            // Consuming the orphan to remove it from the input data.\n            // Second argument in `consumable.consume` is discarded for text nodes.\n            consumable.consume(child, {\n                name: true\n            });\n        }\n    };\n}\n\nconst DEFAULT_ELEMENT = 'paragraph';\n/**\n * The editing part of the code block feature.\n *\n * Introduces the `'codeBlock'` command and the `'codeBlock'` model element.\n */ class CodeBlockEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CodeBlockEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ShiftEnter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('codeBlock', {\n            languages: [\n                {\n                    language: 'plaintext',\n                    label: 'Plain text'\n                },\n                {\n                    language: 'c',\n                    label: 'C'\n                },\n                {\n                    language: 'cs',\n                    label: 'C#'\n                },\n                {\n                    language: 'cpp',\n                    label: 'C++'\n                },\n                {\n                    language: 'css',\n                    label: 'CSS'\n                },\n                {\n                    language: 'diff',\n                    label: 'Diff'\n                },\n                {\n                    language: 'html',\n                    label: 'HTML'\n                },\n                {\n                    language: 'java',\n                    label: 'Java'\n                },\n                {\n                    language: 'javascript',\n                    label: 'JavaScript'\n                },\n                {\n                    language: 'php',\n                    label: 'PHP'\n                },\n                {\n                    language: 'python',\n                    label: 'Python'\n                },\n                {\n                    language: 'ruby',\n                    label: 'Ruby'\n                },\n                {\n                    language: 'typescript',\n                    label: 'TypeScript'\n                },\n                {\n                    language: 'xml',\n                    label: 'XML'\n                }\n            ],\n            // A single tab.\n            indentSequence: '\\t'\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const model = editor.model;\n        const view = editor.editing.view;\n        const normalizedLanguagesDefs = getNormalizedAndLocalizedLanguageDefinitions(editor);\n        // The main command.\n        editor.commands.add('codeBlock', new CodeBlockCommand(editor));\n        // Commands that change the indentation.\n        editor.commands.add('indentCodeBlock', new IndentCodeBlockCommand(editor));\n        editor.commands.add('outdentCodeBlock', new OutdentCodeBlockCommand(editor));\n        this.listenTo(view.document, 'tab', (evt, data)=>{\n            const commandName = data.shiftKey ? 'outdentCodeBlock' : 'indentCodeBlock';\n            const command = editor.commands.get(commandName);\n            if (!command.isEnabled) {\n                return;\n            }\n            editor.execute(commandName);\n            data.stopPropagation();\n            data.preventDefault();\n            evt.stop();\n        }, {\n            context: 'pre'\n        });\n        schema.register('codeBlock', {\n            allowWhere: '$block',\n            allowChildren: '$text',\n            // Disallow `$inlineObject` and its derivatives like `inlineWidget` inside `codeBlock` to ensure that only text,\n            // not other inline elements like inline images, are allowed. This maintains the semantic integrity of code blocks.\n            disallowChildren: '$inlineObject',\n            allowAttributes: [\n                'language'\n            ],\n            allowAttributesOf: '$listItem',\n            isBlock: true\n        });\n        // Disallow formatting attributes on `codeBlock` children.\n        schema.addAttributeCheck((context, attributeName)=>{\n            const parent = context.getItem(context.length - 2);\n            const isFormatting = schema.getAttributeProperties(attributeName).isFormatting;\n            if (isFormatting && parent && parent.name == 'codeBlock') {\n                return false;\n            }\n        });\n        // Conversion.\n        editor.editing.downcastDispatcher.on('insert:codeBlock', modelToViewCodeBlockInsertion(model, normalizedLanguagesDefs, true));\n        editor.data.downcastDispatcher.on('insert:codeBlock', modelToViewCodeBlockInsertion(model, normalizedLanguagesDefs));\n        editor.data.downcastDispatcher.on('insert:softBreak', modelToDataViewSoftBreakInsertion(model), {\n            priority: 'high'\n        });\n        editor.data.upcastDispatcher.on('element:code', dataViewToModelCodeBlockInsertion(view, normalizedLanguagesDefs));\n        editor.data.upcastDispatcher.on('text', dataViewToModelTextNewlinesInsertion());\n        editor.data.upcastDispatcher.on('element:pre', dataViewToModelOrphanNodeConsumer(), {\n            priority: 'high'\n        });\n        // Intercept the clipboard input (paste) when the selection is anchored in the code block and force the clipboard\n        // data to be pasted as a single plain text. Otherwise, the code lines will split the code block and\n        // \"spill out\" as separate paragraphs.\n        this.listenTo(editor.editing.view.document, 'clipboardInput', (evt, data)=>{\n            let insertionRange = model.createRange(model.document.selection.anchor);\n            // Use target ranges in case this is a drop.\n            if (data.targetRanges) {\n                insertionRange = editor.editing.mapper.toModelRange(data.targetRanges[0]);\n            }\n            if (!insertionRange.start.parent.is('element', 'codeBlock')) {\n                return;\n            }\n            const text = data.dataTransfer.getData('text/plain');\n            const writer = new UpcastWriter(editor.editing.view.document);\n            // Pass the view fragment to the default clipboardInput handler.\n            data.content = rawSnippetTextToViewDocumentFragment(writer, text);\n        });\n        if (editor.plugins.has('ClipboardPipeline')) {\n            // Elements may have a plain textual representation (hence be present in the 'text/plain' data transfer),\n            // but not be allowed in the code block.\n            // Filter them out before inserting the content to the model.\n            editor.plugins.get(ClipboardPipeline).on('contentInsertion', (evt, data)=>{\n                const model = editor.model;\n                const selection = model.document.selection;\n                if (!selection.anchor.parent.is('element', 'codeBlock')) {\n                    return;\n                }\n                model.change((writer)=>{\n                    const contentRange = writer.createRangeIn(data.content);\n                    for (const item of [\n                        ...contentRange.getItems()\n                    ]){\n                        // Remove all nodes disallowed in the code block.\n                        if (item.is('node') && !schema.checkChild(selection.anchor, item)) {\n                            writer.remove(item);\n                        }\n                    }\n                });\n            });\n        }\n        // Make sure multi–line selection is always wrapped in a code block when `getSelectedContent()`\n        // is used (e.g. clipboard copy). Otherwise, only the raw text will be copied to the clipboard and,\n        // upon next paste, this bare text will not be inserted as a code block, which is not the best UX.\n        // Similarly, when the selection in a single line, the selected content should be an inline code\n        // so it can be pasted later on and retain it's preformatted nature.\n        this.listenTo(model, 'getSelectedContent', (evt, [selection])=>{\n            const anchor = selection.anchor;\n            if (selection.isCollapsed || !anchor.parent.is('element', 'codeBlock') || !anchor.hasSameParentAs(selection.focus)) {\n                return;\n            }\n            model.change((writer)=>{\n                const docFragment = evt.return;\n                // fo[o<softBreak></softBreak>b]ar  ->   <codeBlock language=\"...\">[o<softBreak></softBreak>b]<codeBlock>\n                if (anchor.parent.is('element') && (docFragment.childCount > 1 || selection.containsEntireContent(anchor.parent))) {\n                    const codeBlock = writer.createElement('codeBlock', anchor.parent.getAttributes());\n                    writer.append(docFragment, codeBlock);\n                    const newDocumentFragment = writer.createDocumentFragment();\n                    writer.append(codeBlock, newDocumentFragment);\n                    evt.return = newDocumentFragment;\n                    return;\n                }\n                // \"f[oo]\"                          ->   <$text code=\"true\">oo</text>\n                const textNode = docFragment.getChild(0);\n                if (schema.checkAttribute(textNode, 'code')) {\n                    writer.setAttribute('code', true, textNode);\n                }\n            });\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        const commands = editor.commands;\n        const indent = commands.get('indent');\n        const outdent = commands.get('outdent');\n        if (indent) {\n            // Priority is highest due to integration with `IndentList` command of `List` plugin.\n            // If selection is in a code block we give priority to it. This way list item cannot be indented\n            // but if we would give priority to indenting list item then user would have to indent list item\n            // as much as possible and only then he could indent code block.\n            indent.registerChildCommand(commands.get('indentCodeBlock'), {\n                priority: 'highest'\n            });\n        }\n        if (outdent) {\n            outdent.registerChildCommand(commands.get('outdentCodeBlock'));\n        }\n        // Customize the response to the <kbd>Enter</kbd> and <kbd>Shift</kbd>+<kbd>Enter</kbd>\n        // key press when the selection is in the code block. Upon enter key press we can either\n        // leave the block if it's \"two or three enters\" in a row or create a new code block line, preserving\n        // previous line's indentation.\n        this.listenTo(editor.editing.view.document, 'enter', (evt, data)=>{\n            const positionParent = editor.model.document.selection.getLastPosition().parent;\n            if (!positionParent.is('element', 'codeBlock')) {\n                return;\n            }\n            if (!leaveBlockStartOnEnter(editor, data.isSoft) && !leaveBlockEndOnEnter(editor, data.isSoft)) {\n                breakLineOnEnter(editor);\n            }\n            data.preventDefault();\n            evt.stop();\n        }, {\n            context: 'pre'\n        });\n        this._initAriaAnnouncements();\n    }\n    /**\n\t * Observe when user enters or leaves code block and set proper aria value in global live announcer.\n\t * This allows screen readers to indicate when the user has entered and left the specified code block.\n\t *\n\t * @internal\n\t */ _initAriaAnnouncements() {\n        const { model, ui, t } = this.editor;\n        const languageDefs = getNormalizedAndLocalizedLanguageDefinitions(this.editor);\n        let lastFocusedCodeBlock = null;\n        model.document.selection.on('change:range', ()=>{\n            const focusParent = model.document.selection.focus.parent;\n            if (!ui || lastFocusedCodeBlock === focusParent || !focusParent.is('element')) {\n                return;\n            }\n            if (lastFocusedCodeBlock && lastFocusedCodeBlock.is('element', 'codeBlock')) {\n                ui.ariaLiveAnnouncer.announce(getCodeBlockAriaAnnouncement(t, languageDefs, lastFocusedCodeBlock, 'leave'));\n            }\n            if (focusParent.is('element', 'codeBlock')) {\n                ui.ariaLiveAnnouncer.announce(getCodeBlockAriaAnnouncement(t, languageDefs, focusParent, 'enter'));\n            }\n            lastFocusedCodeBlock = focusParent;\n        });\n    }\n}\n/**\n * Normally, when the Enter (or Shift+Enter) key is pressed, a soft line break is to be added to the\n * code block. Let's try to follow the indentation of the previous line when possible, for instance:\n *\n * ```html\n * // Before pressing enter (or shift enter)\n * <codeBlock>\n * \"    foo()\"[]                   // Indent of 4 spaces.\n * </codeBlock>\n *\n * // After pressing:\n * <codeBlock>\n * \"    foo()\"                 // Indent of 4 spaces.\n * <softBreak></softBreak>     // A new soft break created by pressing enter.\n * \"    \"[]                    // Retain the indent of 4 spaces.\n * </codeBlock>\n * ```\n */ function breakLineOnEnter(editor) {\n    const model = editor.model;\n    const modelDoc = model.document;\n    // Use last position as other mechanisms (e.g. condition deciding whether this function should be called) also check that.\n    const lastSelectionPosition = modelDoc.selection.getLastPosition();\n    let leadingWhiteSpaces;\n    const node = getTextNodeAtLineStart(lastSelectionPosition, model);\n    // Figure out the indentation (white space chars) at the beginning of the line.\n    if (node && node.is('$text')) {\n        leadingWhiteSpaces = getLeadingWhiteSpaces(node);\n    }\n    // Keeping everything in a change block for a single undo step.\n    editor.model.change((writer)=>{\n        editor.execute('shiftEnter');\n        // If the line before being broken in two had some indentation, let's retain it\n        // in the new line.\n        if (leadingWhiteSpaces) {\n            writer.insertText(leadingWhiteSpaces, modelDoc.selection.anchor);\n        }\n    });\n}\n/**\n * Leave the code block when Enter (but NOT Shift+Enter) has been pressed twice at the beginning\n * of the code block:\n *\n * ```html\n * // Before:\n * <codeBlock>[]<softBreak></softBreak>foo</codeBlock>\n *\n * // After pressing:\n * <paragraph>[]</paragraph><codeBlock>foo</codeBlock>\n * ```\n *\n * @param isSoftEnter When `true`, enter was pressed along with <kbd>Shift</kbd>.\n * @returns `true` when selection left the block. `false` if stayed.\n */ function leaveBlockStartOnEnter(editor, isSoftEnter) {\n    const model = editor.model;\n    const modelDoc = model.document;\n    const view = editor.editing.view;\n    const lastSelectionPosition = modelDoc.selection.getLastPosition();\n    const nodeAfter = lastSelectionPosition.nodeAfter;\n    if (isSoftEnter || !modelDoc.selection.isCollapsed || !lastSelectionPosition.isAtStart) {\n        return false;\n    }\n    if (!isSoftBreakNode(nodeAfter)) {\n        return false;\n    }\n    // We're doing everything in a single change block to have a single undo step.\n    editor.model.change((writer)=>{\n        // \"Clone\" the <codeBlock> in the standard way.\n        editor.execute('enter');\n        // The cloned block exists now before the original code block.\n        const newBlock = modelDoc.selection.anchor.parent.previousSibling;\n        // Make the cloned <codeBlock> a regular <paragraph> (with clean attributes, so no language).\n        writer.rename(newBlock, DEFAULT_ELEMENT);\n        writer.setSelection(newBlock, 'in');\n        editor.model.schema.removeDisallowedAttributes([\n            newBlock\n        ], writer);\n        // Remove the <softBreak> that originally followed the selection position.\n        writer.remove(nodeAfter);\n    });\n    // Eye candy.\n    view.scrollToTheSelection();\n    return true;\n}\n/**\n * Leave the code block when Enter (but NOT Shift+Enter) has been pressed twice at the end\n * of the code block:\n *\n * ```html\n * // Before:\n * <codeBlock>foo[]</codeBlock>\n *\n * // After first press:\n * <codeBlock>foo<softBreak></softBreak>[]</codeBlock>\n *\n * // After second press:\n * <codeBlock>foo</codeBlock><paragraph>[]</paragraph>\n * ```\n *\n * @param isSoftEnter When `true`, enter was pressed along with <kbd>Shift</kbd>.\n * @returns `true` when selection left the block. `false` if stayed.\n */ function leaveBlockEndOnEnter(editor, isSoftEnter) {\n    const model = editor.model;\n    const modelDoc = model.document;\n    const view = editor.editing.view;\n    const lastSelectionPosition = modelDoc.selection.getLastPosition();\n    const nodeBefore = lastSelectionPosition.nodeBefore;\n    let emptyLineRangeToRemoveOnEnter;\n    if (isSoftEnter || !modelDoc.selection.isCollapsed || !lastSelectionPosition.isAtEnd || !nodeBefore || !nodeBefore.previousSibling) {\n        return false;\n    }\n    // When the position is directly preceded by two soft breaks\n    //\n    //\t\t<codeBlock>foo<softBreak></softBreak><softBreak></softBreak>[]</codeBlock>\n    //\n    // it creates the following range that will be cleaned up before leaving:\n    //\n    //\t\t<codeBlock>foo[<softBreak></softBreak><softBreak></softBreak>]</codeBlock>\n    //\n    if (isSoftBreakNode(nodeBefore) && isSoftBreakNode(nodeBefore.previousSibling)) {\n        emptyLineRangeToRemoveOnEnter = model.createRange(model.createPositionBefore(nodeBefore.previousSibling), model.createPositionAfter(nodeBefore));\n    } else if (isEmptyishTextNode(nodeBefore) && isSoftBreakNode(nodeBefore.previousSibling) && isSoftBreakNode(nodeBefore.previousSibling.previousSibling)) {\n        emptyLineRangeToRemoveOnEnter = model.createRange(model.createPositionBefore(nodeBefore.previousSibling.previousSibling), model.createPositionAfter(nodeBefore));\n    } else if (isEmptyishTextNode(nodeBefore) && isSoftBreakNode(nodeBefore.previousSibling) && isEmptyishTextNode(nodeBefore.previousSibling.previousSibling) && nodeBefore.previousSibling.previousSibling && isSoftBreakNode(nodeBefore.previousSibling.previousSibling.previousSibling)) {\n        emptyLineRangeToRemoveOnEnter = model.createRange(model.createPositionBefore(nodeBefore.previousSibling.previousSibling.previousSibling), model.createPositionAfter(nodeBefore));\n    } else {\n        return false;\n    }\n    // We're doing everything in a single change block to have a single undo step.\n    editor.model.change((writer)=>{\n        // Remove the last <softBreak>s and all white space characters that followed them.\n        writer.remove(emptyLineRangeToRemoveOnEnter);\n        // \"Clone\" the <codeBlock> in the standard way.\n        editor.execute('enter');\n        const newBlock = modelDoc.selection.anchor.parent;\n        // Make the cloned <codeBlock> a regular <paragraph> (with clean attributes, so no language).\n        writer.rename(newBlock, DEFAULT_ELEMENT);\n        editor.model.schema.removeDisallowedAttributes([\n            newBlock\n        ], writer);\n    });\n    // Eye candy.\n    view.scrollToTheSelection();\n    return true;\n}\nfunction isEmptyishTextNode(node) {\n    return node && node.is('$text') && !node.data.match(/\\S/);\n}\nfunction isSoftBreakNode(node) {\n    return node && node.is('element', 'softBreak');\n}\n\n/**\n * The code block UI plugin.\n *\n * Introduces the `'codeBlock'` dropdown.\n */ class CodeBlockUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CodeBlockUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const componentFactory = editor.ui.componentFactory;\n        const normalizedLanguageDefs = getNormalizedAndLocalizedLanguageDefinitions(editor);\n        const itemDefinitions = this._getLanguageListItemDefinitions(normalizedLanguageDefs);\n        const command = editor.commands.get('codeBlock');\n        componentFactory.add('codeBlock', (locale)=>{\n            const dropdownView = createDropdown(locale, SplitButtonView);\n            const splitButtonView = dropdownView.buttonView;\n            const accessibleLabel = t('Insert code block');\n            splitButtonView.set({\n                label: accessibleLabel,\n                tooltip: true,\n                icon: icons.codeBlock,\n                isToggleable: true\n            });\n            splitButtonView.bind('isOn').to(command, 'value', (value)=>!!value);\n            splitButtonView.on('execute', ()=>{\n                editor.execute('codeBlock', {\n                    usePreviousLanguageChoice: true\n                });\n                editor.editing.view.focus();\n            });\n            dropdownView.on('execute', (evt)=>{\n                editor.execute('codeBlock', {\n                    language: evt.source._codeBlockLanguage,\n                    forceValue: true\n                });\n                editor.editing.view.focus();\n            });\n            dropdownView.class = 'ck-code-block-dropdown';\n            dropdownView.bind('isEnabled').to(command);\n            addListToDropdown(dropdownView, itemDefinitions, {\n                role: 'menu',\n                ariaLabel: accessibleLabel\n            });\n            return dropdownView;\n        });\n        componentFactory.add('menuBar:codeBlock', (locale)=>{\n            const menuView = new MenuBarMenuView(locale);\n            menuView.buttonView.set({\n                role: 'menuitem',\n                label: t('Code block'),\n                icon: icons.codeBlock\n            });\n            menuView.bind('isEnabled').to(command);\n            const listView = new MenuBarMenuListView(locale);\n            listView.set({\n                ariaLabel: t('Insert code block')\n            });\n            for (const definition of itemDefinitions){\n                const listItemView = new MenuBarMenuListItemView(locale, menuView);\n                const buttonView = new MenuBarMenuListItemButtonView(locale);\n                buttonView.bind(...Object.keys(definition.model)).to(definition.model);\n                buttonView.set({\n                    isToggleable: true,\n                    role: 'menuitemcheckbox'\n                });\n                buttonView.delegate('execute').to(menuView);\n                buttonView.on('execute', ()=>{\n                    editor.execute('codeBlock', {\n                        language: definition.model._codeBlockLanguage,\n                        forceValue: command.value == definition.model._codeBlockLanguage ? false : true\n                    });\n                    editor.editing.view.focus();\n                });\n                listItemView.children.add(buttonView);\n                listView.items.add(listItemView);\n            }\n            menuView.panelView.children.add(listView);\n            return menuView;\n        });\n    }\n    /**\n\t * A helper returning a collection of the `codeBlock` dropdown items representing languages\n\t * available for the user to choose from.\n\t */ _getLanguageListItemDefinitions(normalizedLanguageDefs) {\n        const editor = this.editor;\n        const command = editor.commands.get('codeBlock');\n        const itemDefinitions = new Collection();\n        for (const languageDef of normalizedLanguageDefs){\n            const definition = {\n                type: 'button',\n                model: new ViewModel({\n                    _codeBlockLanguage: languageDef.language,\n                    label: languageDef.label,\n                    role: 'menuitemradio',\n                    withText: true\n                })\n            };\n            definition.model.bind('isOn').to(command, 'value', (value)=>{\n                return value === definition.model._codeBlockLanguage;\n            });\n            itemDefinitions.add(definition);\n        }\n        return itemDefinitions;\n    }\n}\n\n/**\n * The code block plugin.\n *\n * For more information about this feature check the {@glink api/code-block package page} and the\n * {@glink features/code-blocks code block} feature guide.\n *\n * This is a \"glue\" plugin that loads the {@link module:code-block/codeblockediting~CodeBlockEditing code block editing feature}\n * and the {@link module:code-block/codeblockui~CodeBlockUI code block UI feature}.\n */ class CodeBlock extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            CodeBlockEditing,\n            CodeBlockUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CodeBlock';\n    }\n}\n\nexport { CodeBlock, CodeBlockEditing, CodeBlockUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module code-block/utils\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport type { CodeBlockLanguageDefinition } from './codeblockconfig.js';\nimport type {\n\tDocumentSelection,\n\tElement,\n\tModel,\n\tPosition,\n\tSchema,\n\tText,\n\tUpcastWriter,\n\tViewDocumentFragment,\n\tViewElement\n} from 'ckeditor5/src/engine.js';\n\nimport { first, type LocaleTranslate } from 'ckeditor5/src/utils.js';\n\n/**\n * Returns code block languages as defined in `config.codeBlock.languages` but processed:\n *\n * * To consider the editor localization, i.e. to display {@link module:code-block/codeblockconfig~CodeBlockLanguageDefinition}\n * in the correct language. There is no way to use {@link module:utils/locale~Locale#t} when the user\n * configuration is defined because the editor does not exist yet.\n * * To make sure each definition has a CSS class associated with it even if not specified\n * in the original configuration.\n */\nexport function getNormalizedAndLocalizedLanguageDefinitions( editor: Editor ): Array<CodeBlockLanguageDefinition> {\n\tconst t = editor.t;\n\tconst languageDefs = editor.config.get( 'codeBlock.languages' ) as Array<CodeBlockLanguageDefinition>;\n\n\tfor ( const def of languageDefs ) {\n\t\tif ( def.label === 'Plain text' ) {\n\t\t\tdef.label = t( 'Plain text' );\n\t\t}\n\n\t\tif ( def.class === undefined ) {\n\t\t\tdef.class = `language-${ def.language }`;\n\t\t}\n\t}\n\n\treturn languageDefs;\n}\n\n/**\n * Returns an object associating certain language definition properties with others. For instance:\n *\n * For:\n *\n * ```ts\n * const definitions = {\n * \t{ language: 'php', class: 'language-php', label: 'PHP' },\n * \t{ language: 'javascript', class: 'js', label: 'JavaScript' },\n * };\n *\n * getPropertyAssociation( definitions, 'class', 'language' );\n * ```\n *\n * returns:\n *\n * ```ts\n * {\n * \t'language-php': 'php',\n * \t'js': 'javascript'\n * }\n * ```\n *\n * and\n *\n * ```ts\n * getPropertyAssociation( definitions, 'language', 'label' );\n * ```\n *\n * returns:\n *\n * ```ts\n * {\n * \t'php': 'PHP',\n * \t'javascript': 'JavaScript'\n * }\n * ```\n */\nexport function getPropertyAssociation(\n\tlanguageDefs: Array<CodeBlockLanguageDefinition>,\n\tkey: keyof CodeBlockLanguageDefinition,\n\tvalue: keyof CodeBlockLanguageDefinition\n): Record<string, string> {\n\tconst association: Record<string, string> = {};\n\n\tfor ( const def of languageDefs ) {\n\t\tif ( key === 'class' ) {\n\t\t\t// Only the first class is considered.\n\t\t\tconst newKey = ( def[ key ]! ).split( ' ' ).shift()!;\n\n\t\t\tassociation[ newKey ] = def[ value ]!;\n\t\t} else {\n\t\t\tassociation[ def[ key ]! ] = def[ value ]!;\n\t\t}\n\t}\n\n\treturn association;\n}\n\n/**\n * For a given model text node, it returns white spaces that precede other characters in that node.\n * This corresponds to the indentation part of the code block line.\n */\nexport function getLeadingWhiteSpaces( textNode: Text ): string {\n\treturn textNode.data.match( /^(\\s*)/ )![ 0 ];\n}\n\n/**\n * For plain text containing the code (a snippet), it returns a document fragment containing\n * view text nodes separated by `<br>` elements (in place of new line characters \"\\n\"), for instance:\n *\n * Input:\n *\n * ```ts\n * \"foo()\\n\n * bar()\"\n * ```\n *\n * Output:\n *\n * ```html\n * <DocumentFragment>\n * \t\"foo()\"\n * \t<br/>\n * \t\"bar()\"\n * </DocumentFragment>\n * ```\n *\n * @param text The raw code text to be converted.\n */\nexport function rawSnippetTextToViewDocumentFragment( writer: UpcastWriter, text: string ): ViewDocumentFragment {\n\tconst fragment = writer.createDocumentFragment();\n\tconst textLines = text.split( '\\n' );\n\n\tconst items = textLines.reduce( ( nodes: Array<string | ViewElement>, line, lineIndex ) => {\n\t\tnodes.push( line );\n\n\t\tif ( lineIndex < textLines.length - 1 ) {\n\t\t\tnodes.push( writer.createElement( 'br' ) );\n\t\t}\n\n\t\treturn nodes;\n\t}, [] );\n\n\twriter.appendChild( items, fragment );\n\n\treturn fragment;\n}\n\n/**\n * Returns an array of all model positions within the selection that represent code block lines.\n *\n * If the selection is collapsed, it returns the exact selection anchor position:\n *\n * ```html\n * <codeBlock>[]foo</codeBlock>        ->     <codeBlock>^foo</codeBlock>\n * <codeBlock>foo[]bar</codeBlock>     ->     <codeBlock>foo^bar</codeBlock>\n * ```\n *\n * Otherwise, it returns positions **before** each text node belonging to all code blocks contained by the selection:\n *\n * ```html\n * <codeBlock>                                <codeBlock>\n *     foo[bar                                   ^foobar\n *     <softBreak></softBreak>         ->        <softBreak></softBreak>\n *     baz]qux                                   ^bazqux\n * </codeBlock>                               </codeBlock>\n * ```\n *\n * It also works across other non–code blocks:\n *\n * ```html\n * <codeBlock>                                <codeBlock>\n *     foo[bar                                   ^foobar\n * </codeBlock>                               </codeBlock>\n * <paragraph>text</paragraph>         ->     <paragraph>text</paragraph>\n * <codeBlock>                                <codeBlock>\n *     baz]qux                                   ^bazqux\n * </codeBlock>                               </codeBlock>\n * ```\n *\n * **Note:** The positions are in reverse order so they do not get outdated when iterating over them and\n * the writer inserts or removes elements at the same time.\n *\n * **Note:** The position is located after the leading white spaces in the text node.\n */\nexport function getIndentOutdentPositions( model: Model ): Array<Position> {\n\tconst selection = model.document.selection;\n\tconst positions: Array<Position> = [];\n\n\t// When the selection is collapsed, there's only one position we can indent or outdent.\n\tif ( selection.isCollapsed ) {\n\t\treturn [ selection.anchor! ];\n\t}\n\n\t// When the selection is NOT collapsed, collect all positions starting before text nodes\n\t// (code lines) in any <codeBlock> within the selection.\n\n\t// Walk backward so positions we are about to collect here do not get outdated when\n\t// inserting or deleting using the writer.\n\n\tconst walker = selection.getFirstRange()!.getWalker( {\n\t\tignoreElementEnd: true,\n\t\tdirection: 'backward'\n\t} );\n\n\tfor ( const { item } of walker ) {\n\t\tlet node = item.is( '$textProxy' ) ? item.textNode : item;\n\t\tconst parent = node.parent;\n\n\t\tif ( !parent!.is( 'element', 'codeBlock' ) || node.is( 'element', 'softBreak' ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// For each item in code block, move backwards until the beginning of the line it is in is found.\n\t\twhile ( node.previousSibling && !node.previousSibling.is( 'element', 'softBreak' ) ) {\n\t\t\tnode = node.previousSibling;\n\t\t}\n\n\t\t// Take the leading white spaces into account (only for text nodes).\n\t\tconst startOffset = !node.is( '$text' ) ? node.startOffset! : node.startOffset! + getLeadingWhiteSpaces( node ).length;\n\t\tconst position = model.createPositionAt( parent, startOffset );\n\n\t\t// Do not add the same position twice. Unfortunately using set doesn't deduplicate positions because\n\t\t// they are different objects.\n\t\tif ( positions.every( pos => !pos.isEqual( position ) ) ) {\n\t\t\tpositions.push( position );\n\t\t}\n\t}\n\n\treturn positions;\n}\n\n/**\n * Checks if any of the blocks within the model selection is a code block.\n */\nexport function isModelSelectionInCodeBlock( selection: DocumentSelection ): boolean {\n\tconst firstBlock = first( selection.getSelectedBlocks() );\n\n\treturn !!firstBlock && firstBlock.is( 'element', 'codeBlock' );\n}\n\n/**\n * Checks if an {@link module:engine/model/element~Element Element} can become a code block.\n *\n * @param schema Model's schema.\n * @param element The element to be checked.\n * @returns Check result.\n */\nexport function canBeCodeBlock( schema: Schema, element: Element ): boolean {\n\tif ( element.is( 'rootElement' ) || schema.isLimit( element ) ) {\n\t\treturn false;\n\t}\n\n\treturn schema.checkChild( element.parent as Element, 'codeBlock' );\n}\n\n/**\n * Get the translated message read by the screen reader when you enter or exit an element with your cursor.\n */\nexport function getCodeBlockAriaAnnouncement(\n\tt: LocaleTranslate,\n\tlanguageDefs: Array<CodeBlockLanguageDefinition>,\n\telement: Element,\n\tdirection: 'enter' | 'leave'\n): string {\n\tconst languagesToLabels = getPropertyAssociation( languageDefs, 'language', 'label' );\n\tconst codeBlockLanguage = element.getAttribute( 'language' ) as string;\n\n\tif ( codeBlockLanguage in languagesToLabels ) {\n\t\tconst language = languagesToLabels[ codeBlockLanguage ];\n\n\t\tif ( direction === 'enter' ) {\n\t\t\treturn t( 'Entering %0 code snippet', language );\n\t\t}\n\n\t\treturn t( 'Leaving %0 code snippet', language );\n\t}\n\n\tif ( direction === 'enter' ) {\n\t\treturn t( 'Entering code snippet' );\n\t}\n\n\treturn t( 'Leaving code snippet' );\n}\n\n/**\n * For given position, finds the closest position that is at the beginning of a line of code and returns a text node that is at the\n * beginning of the line (or `null` if there's no text node at the beginning of a given line).\n *\n * Line beings at the start of a code block element and after each `softBreak` element.\n *\n * Note: even though code block doesn't allow inline elements other than `<softBreak>` by default, some features may overwrite this rule,\n * so such inline elements are taken into account.\n *\n * Some examples of expected results:\n *\n * ```\n * <codeBlock>^</codeBlock>                                ->   null\n * <codeBlock>^foobar</codeBlock>                          ->   <codeBlock>[foobar]</codeBlock>\n * <codeBlock>foobar^</codeBlock>                          ->   <codeBlock>[foobar]</codeBlock>\n * <codeBlock>foo^bar</codeBlock>                          ->   <codeBlock>[foobar]</codeBlock>\n * <codeBlock>foo^<softBreak />bar</codeBlock>             ->   <codeBlock>[foo]<softBreak />bar</codeBlock>\n * <codeBlock>foo<softBreak />bar^</codeBlock>             ->   <codeBlock>foo<softBreak />[bar]</codeBlock>\n * <codeBlock>foo<softBreak />b^ar</codeBlock>             ->   <codeBlock>foo<softBreak />[bar]</codeBlock>\n * <codeBlock>foo<softBreak />^bar</codeBlock>             ->   <codeBlock>foo<softBreak />[bar]</codeBlock>\n * <codeBlock>^<element /></codeBlock>                     ->   null\n * <codeBlock><element />^</codeBlock>                     ->   null\n * <codeBlock>foo^<element /></codeBlock>                  ->   <codeBlock>[foo]<element /></codeBlock>\n * <codeBlock>foo<element />^</codeBlock>                  ->   <codeBlock>[foo]<element /></codeBlock>\n * <codeBlock>foo<element />bar^</codeBlock>               ->   <codeBlock>[foo]<element />bar</codeBlock>\n * <codeBlock><element />bar^</codeBlock>                  ->   null\n * <codeBlock>foo<softBreak />^<softBreak /></codeBlock>   ->   null\n * <codeBlock>foo<softBreak />^<element /></codeBlock>     ->   null\n * <codeBlock>foo<softBreak /><element />^</codeBlock>     ->   null\n * <codeBlock>foo<softBreak />bar<element />^</codeBlock>  ->   <codeBlock>foo<softBreak />[bar]<element /></codeBlock>\n * <codeBlock>foo<softBreak /><element />ba^r</codeBlock>  ->   null\n * ```\n */\nexport function getTextNodeAtLineStart( position: Position, model: Model ): Text | null {\n\t// First, move position before a text node, if it is inside a text node.\n\tif ( position.textNode ) {\n\t\tposition = model.createPositionBefore( position.textNode );\n\t}\n\n\t// Then, jump-back the position until it is before a `softBreak` or at the beginning of the `codeBlock`.\n\twhile ( position.nodeBefore && !position.nodeBefore.is( 'element', 'softBreak' ) ) {\n\t\tposition = model.createPositionBefore( position.nodeBefore );\n\t}\n\n\t// Now, the position is at the beginning of a line.\n\t// Return a text node after the position, if there is one.\n\tconst nodeAtStart = position.nodeAfter;\n\n\treturn nodeAtStart && nodeAtStart.is( '$text' ) ? nodeAtStart : null;\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module code-block/codeblockcommand\n */\n\nimport type { Element, Writer } from 'ckeditor5/src/engine.js';\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport { first } from 'ckeditor5/src/utils.js';\n\nimport { getNormalizedAndLocalizedLanguageDefinitions, canBeCodeBlock } from './utils.js';\n\n/**\n * The code block command plugin.\n */\nexport default class CodeBlockCommand extends Command {\n\t/**\n\t * Contains the last used language.\n\t */\n\tprivate _lastLanguage: string | null;\n\n\t/**\n\t * Contains language if any is selected, false otherwise.\n\t * @observable\n\t * @readonly\n\t */\n\tdeclare public value: string | false;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\tthis._lastLanguage = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command. When the command {@link #value is on}, all topmost code blocks within\n\t * the selection will be removed. If it is off, all selected blocks will be flattened and\n\t * wrapped by a code block.\n\t *\n\t * @fires execute\n\t * @param options Command options.\n\t * @param options.language The code block language.\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will apply a code block,\n\t * otherwise the command will remove the code block. If not set, the command will act basing on its current value.\n\t * @param options.usePreviousLanguageChoice If set on `true` and the `options.language` is not specified, the command\n\t * will apply the previous language (if the command was already executed) when inserting the `codeBlock` element.\n\t */\n\tpublic override execute( options: {\n\t\tlanguage?: string;\n\t\tforceValue?: boolean;\n\t\tusePreviousLanguageChoice?: boolean;\n\t} = {} ): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst normalizedLanguagesDefs = getNormalizedAndLocalizedLanguageDefinitions( editor );\n\t\tconst firstLanguageInConfig = normalizedLanguagesDefs[ 0 ];\n\n\t\tconst blocks = Array.from( selection.getSelectedBlocks() );\n\t\tconst value = options.forceValue == undefined ? !this.value : options.forceValue;\n\t\tconst language = getLanguage( options, this._lastLanguage, firstLanguageInConfig.language );\n\n\t\tmodel.change( writer => {\n\t\t\tif ( value ) {\n\t\t\t\tthis._applyCodeBlock( writer, blocks, language );\n\t\t\t} else {\n\t\t\t\tthis._removeCodeBlock( writer, blocks );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */\n\tprivate _getValue(): string | false {\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst firstBlock = first( selection.getSelectedBlocks() );\n\t\tconst isCodeBlock = !!( firstBlock && firstBlock.is( 'element', 'codeBlock' ) );\n\n\t\treturn isCodeBlock ? firstBlock.getAttribute( 'language' ) as string : false;\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled(): boolean {\n\t\tif ( this.value ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst schema = this.editor.model.schema;\n\n\t\tconst firstBlock = first( selection.getSelectedBlocks() );\n\n\t\tif ( !firstBlock ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn canBeCodeBlock( schema, firstBlock );\n\t}\n\n\tprivate _applyCodeBlock( writer: Writer, blocks: Array<Element>, language: string ): void {\n\t\tthis._lastLanguage = language;\n\n\t\tconst schema = this.editor.model.schema;\n\t\tconst allowedBlocks = blocks.filter( block => canBeCodeBlock( schema, block ) );\n\n\t\tfor ( const block of allowedBlocks ) {\n\t\t\twriter.rename( block, 'codeBlock' );\n\t\t\twriter.setAttribute( 'language', language, block );\n\t\t\tschema.removeDisallowedAttributes( [ block ], writer );\n\n\t\t\t// Remove children of the  `codeBlock` element that are not allowed. See #9567.\n\t\t\tArray.from( block.getChildren() )\n\t\t\t\t.filter( child => !schema.checkChild( block, child ) )\n\t\t\t\t.forEach( child => writer.remove( child ) );\n\t\t}\n\n\t\tallowedBlocks.reverse().forEach( ( currentBlock, i ) => {\n\t\t\tconst nextBlock = allowedBlocks[ i + 1 ];\n\n\t\t\tif ( currentBlock.previousSibling === nextBlock ) {\n\t\t\t\twriter.appendElement( 'softBreak', nextBlock );\n\t\t\t\twriter.merge( writer.createPositionBefore( currentBlock ) );\n\t\t\t}\n\t\t} );\n\t}\n\n\tprivate _removeCodeBlock( writer: Writer, blocks: Array<Element> ): void {\n\t\tconst codeBlocks = blocks.filter( block => block.is( 'element', 'codeBlock' ) );\n\n\t\tfor ( const block of codeBlocks ) {\n\t\t\tconst range = writer.createRangeOn( block );\n\n\t\t\tfor ( const item of Array.from( range.getItems() ).reverse() ) {\n\t\t\t\tif ( item.is( 'element', 'softBreak' ) && item.parent!.is( 'element', 'codeBlock' ) ) {\n\t\t\t\t\tconst { position } = writer.split( writer.createPositionBefore( item ) );\n\t\t\t\t\tconst elementAfter = position.nodeAfter as Element;\n\n\t\t\t\t\twriter.rename( elementAfter, 'paragraph' );\n\t\t\t\t\twriter.removeAttribute( 'language', elementAfter );\n\t\t\t\t\twriter.remove( item );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriter.rename( block, 'paragraph' );\n\t\t\twriter.removeAttribute( 'language', block );\n\t\t}\n\t}\n}\n\n/**\n * Picks the language for the new code block. If any language is passed as an option,\n * it will be returned. Else, if option usePreviousLanguageChoice is true and some\n * code block was already created (lastLanguage is not null) then previously used\n * language will be returned. If not, it will return default language.\n */\nfunction getLanguage(\n\toptions: { usePreviousLanguageChoice?: boolean; language?: string },\n\tlastLanguage: string | null,\n\tdefaultLanguage: string\n): string {\n\tif ( options.language ) {\n\t\treturn options.language;\n\t}\n\n\tif ( options.usePreviousLanguageChoice && lastLanguage ) {\n\t\treturn lastLanguage;\n\t}\n\n\treturn defaultLanguage;\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module code-block/indentcodeblockcommand\n */\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\n\nimport {\n\tgetIndentOutdentPositions,\n\tisModelSelectionInCodeBlock\n} from './utils.js';\n\n/**\n * The code block indentation increase command plugin.\n */\nexport default class IndentCodeBlockCommand extends Command {\n\t/**\n\t * A sequence of characters added to the line when the command is executed.\n\t */\n\tprivate _indentSequence: string;\n\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\tthis._indentSequence = editor.config.get( 'codeBlock.indentSequence' )!;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command. When the command {@link #isEnabled is enabled}, the indentation of the\n\t * code lines in the selection will be increased.\n\t *\n\t * @fires execute\n\t */\n\tpublic override execute(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tmodel.change( writer => {\n\t\t\tconst positions = getIndentOutdentPositions( model );\n\n\t\t\t// Indent all positions, for instance assuming the indent sequence is 4x space (\"    \"):\n\t\t\t//\n\t\t\t//\t\t<codeBlock>^foo</codeBlock>        ->       <codeBlock>    foo</codeBlock>\n\t\t\t//\n\t\t\t//\t\t<codeBlock>foo^bar</codeBlock>     ->       <codeBlock>foo    bar</codeBlock>\n\t\t\t//\n\t\t\t// Also, when there is more than one position:\n\t\t\t//\n\t\t\t//\t\t<codeBlock>\n\t\t\t//\t\t\t^foobar\n\t\t\t//\t\t\t<softBreak></softBreak>\n\t\t\t//\t\t\t^bazqux\n\t\t\t//\t\t</codeBlock>\n\t\t\t//\n\t\t\t//\t\t->\n\t\t\t//\n\t\t\t//\t\t<codeBlock>\n\t\t\t//\t\t\t    foobar\n\t\t\t//\t\t\t<softBreak></softBreak>\n\t\t\t//\t\t\t    bazqux\n\t\t\t//\t\t</codeBlock>\n\t\t\t//\n\t\t\tfor ( const position of positions ) {\n\t\t\t\tconst indentSequenceTextElement = writer.createText( this._indentSequence );\n\n\t\t\t\t// Previously insertion was done by writer.insertText(). It was changed to insertContent() to enable\n\t\t\t\t// integration of code block with track changes. It's the easiest way of integration because insertContent()\n\t\t\t\t// is already integrated with track changes, but if it ever cause any troubles it can be reverted, however\n\t\t\t\t// some additional work will be required in track changes integration of code block.\n\t\t\t\tmodel.insertContent( indentSequenceTextElement, position );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t */\n\tprivate _checkEnabled(): boolean {\n\t\tif ( !this._indentSequence ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Indent (forward) command is always enabled when there's any code block in the selection\n\t\t// because you can always indent code lines.\n\t\treturn isModelSelectionInCodeBlock( this.editor.model.document.selection );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module code-block/outdentcodeblockcommand\n */\n\nimport type { Model, Position, Range } from 'ckeditor5/src/engine.js';\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\n\nimport {\n\tgetLeadingWhiteSpaces,\n\tgetIndentOutdentPositions,\n\tisModelSelectionInCodeBlock,\n\tgetTextNodeAtLineStart\n} from './utils.js';\n\n/**\n * The code block indentation decrease command plugin.\n */\nexport default class OutdentCodeBlockCommand extends Command {\n\t/**\n\t * A sequence of characters removed from the line when the command is executed.\n\t */\n\tprivate readonly _indentSequence: string;\n\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\tthis._indentSequence = editor.config.get( 'codeBlock.indentSequence' )!;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command. When the command {@link #isEnabled is enabled}, the indentation of the\n\t * code lines in the selection will be decreased.\n\t *\n\t * @fires execute\n\t */\n\tpublic override execute(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tmodel.change( () => {\n\t\t\tconst positions = getIndentOutdentPositions( model );\n\n\t\t\t// Outdent all positions, for instance assuming the indent sequence is 4x space (\"    \"):\n\t\t\t//\n\t\t\t//\t\t<codeBlock>^foo</codeBlock>         ->       <codeBlock>foo</codeBlock>\n\t\t\t//\n\t\t\t//\t\t<codeBlock>    ^bar</codeBlock>     ->       <codeBlock>bar</codeBlock>\n\t\t\t//\n\t\t\t// Also, when there is more than one position:\n\t\t\t//\n\t\t\t//\t\t<codeBlock>\n\t\t\t//\t\t\t    ^foobar\n\t\t\t//\t\t\t<softBreak></softBreak>\n\t\t\t//\t\t\t    ^bazqux\n\t\t\t//\t\t</codeBlock>\n\t\t\t//\n\t\t\t//\t\t->\n\t\t\t//\n\t\t\t//\t\t<codeBlock>\n\t\t\t//\t\t\tfoobar\n\t\t\t//\t\t\t<softBreak></softBreak>\n\t\t\t//\t\t\tbazqux\n\t\t\t//\t\t</codeBlock>\n\t\t\tfor ( const position of positions ) {\n\t\t\t\tconst range = getLastOutdentableSequenceRange( model, position, this._indentSequence );\n\n\t\t\t\tif ( range ) {\n\t\t\t\t\t// Previously deletion was done by writer.remove(). It was changed to deleteContent() to enable\n\t\t\t\t\t// integration of code block with track changes. It's the easiest way of integration because deleteContent()\n\t\t\t\t\t// is already integrated with track changes, but if it ever cause any troubles it can be reverted, however\n\t\t\t\t\t// some additional work will be required in track changes integration of code block.\n\t\t\t\t\tmodel.deleteContent( model.createSelection( range ) );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled(): boolean {\n\t\tif ( !this._indentSequence ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst model = this.editor.model;\n\n\t\tif ( !isModelSelectionInCodeBlock( model.document.selection ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Outdent command can execute only when there is an indent character sequence\n\t\t// in some of the lines.\n\t\treturn getIndentOutdentPositions( model ).some( position => {\n\t\t\treturn getLastOutdentableSequenceRange( model, position, this._indentSequence );\n\t\t} );\n\t}\n}\n\n// For a position coming from `getIndentOutdentPositions()`, it returns the range representing\n// the last occurrence of the indent sequence among the leading whitespaces of the code line the\n// position represents.\n//\n// For instance, assuming the indent sequence is 4x space (\"    \"):\n//\n//\t\t<codeBlock>foo^</codeBlock>                                 ->          null\n//\t\t<codeBlock>foo^<softBreak></softBreak>bar</codeBlock>       ->          null\n//\t\t<codeBlock>  ^foo</codeBlock>                               ->          null\n//\t\t<codeBlock>        ^foo</codeBlock>                         ->          <codeBlock>    [    ]foo</codeBlock>\n//\t\t<codeBlock>    ^foo    bar</codeBlock>                      ->          <codeBlock>[    ]foo    bar</codeBlock>\n//\n// @param {<module:engine/model/model~Model>} model\n// @param {<module:engine/model/position~Position>} position\n// @param {String} sequence\n// @returns {<module:engine/model/range~Range>|null}\nfunction getLastOutdentableSequenceRange( model: Model, position: Position, sequence: string ): Range | null {\n\t// Positions start before each text node (code line). Get the node corresponding to the position.\n\tconst nodeAtPosition = getTextNodeAtLineStart( position, model );\n\n\tif ( !nodeAtPosition ) {\n\t\treturn null;\n\t}\n\n\tconst leadingWhiteSpaces = getLeadingWhiteSpaces( nodeAtPosition );\n\tconst lastIndexOfSequence = leadingWhiteSpaces.lastIndexOf( sequence );\n\n\t// For instance, assuming the indent sequence is 4x space (\"    \"):\n\t//\n\t//\t\t<codeBlock>    \t^foo</codeBlock>           ->             null\n\t//\n\tif ( lastIndexOfSequence + sequence.length !== leadingWhiteSpaces.length ) {\n\t\treturn null;\n\t}\n\n\t// For instance, assuming the indent sequence is 4x space (\"    \"):\n\t//\n\t//\t\t<codeBlock>  ^foo</codeBlock>           ->             null\n\t//\n\tif ( lastIndexOfSequence === -1 ) {\n\t\treturn null;\n\t}\n\n\tconst { parent, startOffset } = nodeAtPosition;\n\n\t// Create a range that contains the **last** indent sequence among the leading whitespaces\n\t// of the line.\n\t//\n\t// For instance, assuming the indent sequence is 4x space (\"    \"):\n\t//\n\t//\t\t<codeBlock>        ^foo</codeBlock>      ->     <codeBlock>    [    ]foo</codeBlock>\n\t//\n\treturn model.createRange(\n\t\tmodel.createPositionAt( parent!, startOffset! + lastIndexOfSequence ),\n\t\tmodel.createPositionAt( parent!, startOffset! + lastIndexOfSequence + sequence.length )\n\t);\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module code-block/converters\n */\n\nimport type { GetCallback } from 'ckeditor5/src/utils.js';\nimport type { DowncastInsertEvent, Element, Model, UpcastElementEvent, UpcastTextEvent, EditingView } from 'ckeditor5/src/engine.js';\nimport type { CodeBlockLanguageDefinition } from './codeblockconfig.js';\nimport { getPropertyAssociation } from './utils.js';\n\n/**\n * A model-to-view (both editing and data) converter for the `codeBlock` element.\n *\n * Sample input:\n *\n * ```html\n * <codeBlock language=\"javascript\">foo();<softBreak></softBreak>bar();</codeBlock>\n * ```\n *\n * Sample output (editing):\n *\n * ```html\n * <pre data-language=\"JavaScript\"><code class=\"language-javascript\">foo();<br />bar();</code></pre>\n * ```\n *\n * Sample output (data, see {@link module:code-block/converters~modelToDataViewSoftBreakInsertion}):\n *\n * ```html\n * <pre><code class=\"language-javascript\">foo();\\nbar();</code></pre>\n * ```\n *\n * @param languageDefs The normalized language configuration passed to the feature.\n * @param useLabels When `true`, the `<pre>` element will get a `data-language` attribute with a\n * human–readable label of the language. Used only in the editing.\n * @returns Returns a conversion callback.\n */\nexport function modelToViewCodeBlockInsertion(\n\tmodel: Model,\n\tlanguageDefs: Array<CodeBlockLanguageDefinition>,\n\tuseLabels: boolean = false\n): GetCallback<DowncastInsertEvent> {\n\t// Language CSS classes:\n\t//\n\t//\t\t{\n\t//\t\t\tphp: 'language-php',\n\t//\t\t\tpython: 'language-python',\n\t//\t\t\tjavascript: 'js',\n\t//\t\t\t...\n\t//\t\t}\n\tconst languagesToClasses = getPropertyAssociation( languageDefs, 'language', 'class' );\n\n\t// Language labels:\n\t//\n\t//\t\t{\n\t//\t\t\tphp: 'PHP',\n\t//\t\t\tpython: 'Python',\n\t//\t\t\tjavascript: 'JavaScript',\n\t//\t\t\t...\n\t//\t\t}\n\tconst languagesToLabels = getPropertyAssociation( languageDefs, 'language', 'label' );\n\n\treturn ( evt, data, conversionApi ): void => {\n\t\tconst { writer, mapper, consumable } = conversionApi;\n\n\t\tif ( !consumable.consume( data.item, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst codeBlockLanguage = data.item.getAttribute( 'language' ) as string;\n\t\tconst targetViewPosition = mapper.toViewPosition( model.createPositionBefore( data.item ) );\n\t\tconst preAttributes: Record<string, string> = {};\n\n\t\t// Attributes added only in the editing view.\n\t\tif ( useLabels ) {\n\t\t\tpreAttributes[ 'data-language' ] = languagesToLabels[ codeBlockLanguage ];\n\t\t\tpreAttributes.spellcheck = 'false';\n\t\t}\n\n\t\tconst codeAttributes = languagesToClasses[ codeBlockLanguage ] ? {\n\t\t\tclass: languagesToClasses[ codeBlockLanguage ]\n\t\t} : undefined;\n\t\tconst code = writer.createContainerElement( 'code', codeAttributes );\n\n\t\tconst pre = writer.createContainerElement( 'pre', preAttributes, code );\n\n\t\twriter.insert( targetViewPosition, pre );\n\n\t\tmapper.bindElements( data.item as Element, code );\n\t};\n}\n\n/**\n * A model-to-data view converter for the new line (`softBreak`) separator.\n *\n * Sample input:\n *\n * ```html\n * <codeBlock ...>foo();<softBreak></softBreak>bar();</codeBlock>\n * ```\n *\n * Sample output:\n *\n * ```html\n * <pre><code ...>foo();\\nbar();</code></pre>\n * ```\n *\n * @returns Returns a conversion callback.\n */\nexport function modelToDataViewSoftBreakInsertion( model: Model ): GetCallback<DowncastInsertEvent> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( data.item.parent!.name !== 'codeBlock' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { writer, mapper, consumable } = conversionApi;\n\n\t\tif ( !consumable.consume( data.item, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = mapper.toViewPosition( model.createPositionBefore( data.item ) );\n\n\t\twriter.insert( position, writer.createText( '\\n' ) );\n\t};\n}\n\n/**\n * A view-to-model converter for `<pre>` with the `<code>` HTML.\n *\n * Sample input:\n *\n * ```html\n * <pre><code class=\"language-javascript\">foo();bar();</code></pre>\n * ```\n *\n * Sample output:\n *\n * ```html\n * <codeBlock language=\"javascript\">foo();bar();</codeBlock>\n * ```\n *\n * @param languageDefs The normalized language configuration passed to the feature.\n * @returns Returns a conversion callback.\n */\nexport function dataViewToModelCodeBlockInsertion(\n\teditingView: EditingView,\n\tlanguageDefs: Array<CodeBlockLanguageDefinition>\n): GetCallback<UpcastElementEvent> {\n\t// Language names associated with CSS classes:\n\t//\n\t//\t\t{\n\t//\t\t\t'language-php': 'php',\n\t//\t\t\t'language-python': 'python',\n\t//\t\t\tjs: 'javascript',\n\t//\t\t\t...\n\t//\t\t}\n\tconst classesToLanguages = getPropertyAssociation( languageDefs, 'class', 'language' );\n\tconst defaultLanguageName = languageDefs[ 0 ].language;\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewCodeElement = data.viewItem;\n\t\tconst viewPreElement = viewCodeElement.parent;\n\n\t\tif ( !viewPreElement || !viewPreElement.is( 'element', 'pre' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// In case of nested code blocks we don't want to convert to another code block.\n\t\tif ( data.modelCursor.findAncestor( 'codeBlock' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { consumable, writer } = conversionApi;\n\n\t\tif ( !consumable.test( viewCodeElement, { name: true } ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst codeBlock = writer.createElement( 'codeBlock' );\n\t\tconst viewChildClasses = [ ...viewCodeElement.getClassNames() ];\n\n\t\t// As we're to associate each class with a model language, a lack of class (empty class) can be\n\t\t// also associated with a language if the language definition was configured so. Pushing an empty\n\t\t// string to make sure the association will work.\n\t\tif ( !viewChildClasses.length ) {\n\t\t\tviewChildClasses.push( '' );\n\t\t}\n\n\t\t// Figure out if any of the <code> element's class names is a valid programming\n\t\t// language class. If so, use it on the model element (becomes the language of the entire block).\n\t\tfor ( const className of viewChildClasses ) {\n\t\t\tconst language = classesToLanguages[ className ];\n\n\t\t\tif ( language ) {\n\t\t\t\twriter.setAttribute( 'language', language, codeBlock );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If no language value was set, use the default language from the config.\n\t\tif ( !codeBlock.hasAttribute( 'language' ) ) {\n\t\t\twriter.setAttribute( 'language', defaultLanguageName, codeBlock );\n\t\t}\n\n\t\tconversionApi.convertChildren( viewCodeElement, codeBlock );\n\n\t\t// Let's try to insert code block.\n\t\tif ( !conversionApi.safeInsert( codeBlock, data.modelCursor ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsumable.consume( viewCodeElement, { name: true } );\n\n\t\tconversionApi.updateConversionResult( codeBlock, data );\n\t};\n}\n\n/**\n * A view-to-model converter for new line characters in `<pre>`.\n *\n * Sample input:\n *\n * ```html\n * <pre><code class=\"language-javascript\">foo();\\nbar();</code></pre>\n * ```\n *\n * Sample output:\n *\n * ```html\n * <codeBlock language=\"javascript\">foo();<softBreak></softBreak>bar();</codeBlock>\n * ```\n *\n * @returns {Function} Returns a conversion callback.\n */\nexport function dataViewToModelTextNewlinesInsertion(): GetCallback<UpcastTextEvent> {\n\treturn ( evt, data, { consumable, writer } ) => {\n\t\tlet position = data.modelCursor;\n\n\t\t// When node is already converted then do nothing.\n\t\tif ( !consumable.test( data.viewItem ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When not inside `codeBlock` then do nothing.\n\t\tif ( !position.findAncestor( 'codeBlock' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsumable.consume( data.viewItem );\n\n\t\tconst text = data.viewItem.data;\n\t\tconst textLines = text.split( '\\n' ).map( data => writer.createText( data ) );\n\t\tconst lastLine = textLines[ textLines.length - 1 ];\n\n\t\tfor ( const node of textLines ) {\n\t\t\twriter.insert( node, position );\n\t\t\tposition = position.getShiftedBy( node.offsetSize );\n\n\t\t\tif ( node !== lastLine ) {\n\t\t\t\tconst softBreak = writer.createElement( 'softBreak' );\n\n\t\t\t\twriter.insert( softBreak, position );\n\t\t\t\tposition = writer.createPositionAfter( softBreak );\n\t\t\t}\n\t\t}\n\n\t\tdata.modelRange = writer.createRange(\n\t\t\tdata.modelCursor,\n\t\t\tposition\n\t\t);\n\t\tdata.modelCursor = position;\n\t};\n}\n\n/**\n * A view-to-model converter that handles orphan text nodes (white spaces, new lines, etc.)\n * that surround `<code>` inside `<pre>`.\n *\n * Sample input:\n *\n * ```html\n * // White spaces\n * <pre> <code>foo()</code> </pre>\n *\n * // White spaces\n * <pre>      <code>foo()</code>      </pre>\n *\n * // White spaces\n * <pre>\t\t\t<code>foo()</code>\t\t\t</pre>\n *\n * // New lines\n * <pre>\n * \t<code>foo()</code>\n * </pre>\n *\n * // Redundant text\n * <pre>ABC<code>foo()</code>DEF</pre>\n * ```\n *\n * Unified output for each case:\n *\n * ```html\n * <codeBlock language=\"plaintext\">foo()</codeBlock>\n * ```\n *\n * @returns Returns a conversion callback.\n */\nexport function dataViewToModelOrphanNodeConsumer(): GetCallback<UpcastElementEvent> {\n\treturn ( evt, data, { consumable } ) => {\n\t\tconst preElement = data.viewItem;\n\n\t\t// Don't clean up nested pre elements. Their content should stay as it is, they are not upcasted\n\t\t// to code blocks.\n\t\tif ( preElement.findAncestor( 'pre' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst preChildren = Array.from( preElement.getChildren() );\n\t\tconst childCodeElement = preChildren.find( node => node.is( 'element', 'code' ) );\n\n\t\t// <code>-less <pre>. It will not upcast to code block in the model, skipping.\n\t\tif ( !childCodeElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const child of preChildren ) {\n\t\t\tif ( child === childCodeElement || !child.is( '$text' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Consuming the orphan to remove it from the input data.\n\t\t\t// Second argument in `consumable.consume` is discarded for text nodes.\n\t\t\tconsumable.consume( child, { name: true } );\n\t\t}\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module code-block/codeblockediting\n */\n\nimport { Plugin, type Editor, type MultiCommand } from 'ckeditor5/src/core.js';\nimport { ShiftEnter, type ViewDocumentEnterEvent } from 'ckeditor5/src/enter.js';\n\nimport {\n\tUpcastWriter,\n\ttype Range,\n\ttype Node,\n\ttype ModelGetSelectedContentEvent,\n\ttype ViewDocumentTabEvent,\n\ttype DowncastInsertEvent,\n\ttype UpcastElementEvent,\n\ttype UpcastTextEvent,\n\ttype Element,\n\ttype SelectionChangeRangeEvent\n} from 'ckeditor5/src/engine.js';\nimport { ClipboardPipeline, type ClipboardContentInsertionEvent } from 'ckeditor5/src/clipboard.js';\n\nimport type { ListEditing } from '@ckeditor/ckeditor5-list';\n\nimport CodeBlockCommand from './codeblockcommand.js';\nimport IndentCodeBlockCommand from './indentcodeblockcommand.js';\nimport OutdentCodeBlockCommand from './outdentcodeblockcommand.js';\nimport {\n\tgetNormalizedAndLocalizedLanguageDefinitions,\n\tgetLeadingWhiteSpaces,\n\trawSnippetTextToViewDocumentFragment,\n\tgetCodeBlockAriaAnnouncement,\n\tgetTextNodeAtLineStart\n} from './utils.js';\nimport {\n\tmodelToViewCodeBlockInsertion,\n\tmodelToDataViewSoftBreakInsertion,\n\tdataViewToModelCodeBlockInsertion,\n\tdataViewToModelTextNewlinesInsertion,\n\tdataViewToModelOrphanNodeConsumer\n} from './converters.js';\n\nconst DEFAULT_ELEMENT = 'paragraph';\n\n/**\n * The editing part of the code block feature.\n *\n * Introduces the `'codeBlock'` command and the `'codeBlock'` model element.\n */\nexport default class CodeBlockEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'CodeBlockEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ShiftEnter ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'codeBlock', {\n\t\t\tlanguages: [\n\t\t\t\t{ language: 'plaintext', label: 'Plain text' },\n\t\t\t\t{ language: 'c', label: 'C' },\n\t\t\t\t{ language: 'cs', label: 'C#' },\n\t\t\t\t{ language: 'cpp', label: 'C++' },\n\t\t\t\t{ language: 'css', label: 'CSS' },\n\t\t\t\t{ language: 'diff', label: 'Diff' },\n\t\t\t\t{ language: 'html', label: 'HTML' },\n\t\t\t\t{ language: 'java', label: 'Java' },\n\t\t\t\t{ language: 'javascript', label: 'JavaScript' },\n\t\t\t\t{ language: 'php', label: 'PHP' },\n\t\t\t\t{ language: 'python', label: 'Python' },\n\t\t\t\t{ language: 'ruby', label: 'Ruby' },\n\t\t\t\t{ language: 'typescript', label: 'TypeScript' },\n\t\t\t\t{ language: 'xml', label: 'XML' }\n\t\t\t],\n\n\t\t\t// A single tab.\n\t\t\tindentSequence: '\\t'\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst model = editor.model;\n\t\tconst view = editor.editing.view;\n\n\t\tconst normalizedLanguagesDefs = getNormalizedAndLocalizedLanguageDefinitions( editor );\n\n\t\t// The main command.\n\t\teditor.commands.add( 'codeBlock', new CodeBlockCommand( editor ) );\n\n\t\t// Commands that change the indentation.\n\t\teditor.commands.add( 'indentCodeBlock', new IndentCodeBlockCommand( editor ) );\n\t\teditor.commands.add( 'outdentCodeBlock', new OutdentCodeBlockCommand( editor ) );\n\n\t\tthis.listenTo<ViewDocumentTabEvent>( view.document, 'tab', ( evt, data ) => {\n\t\t\tconst commandName = data.shiftKey ? 'outdentCodeBlock' : 'indentCodeBlock';\n\t\t\tconst command: OutdentCodeBlockCommand | IndentCodeBlockCommand = editor.commands.get( commandName )!;\n\n\t\t\tif ( !command.isEnabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditor.execute( commandName );\n\n\t\t\tdata.stopPropagation();\n\t\t\tdata.preventDefault();\n\t\t\tevt.stop();\n\t\t}, { context: 'pre' } );\n\n\t\tschema.register( 'codeBlock', {\n\t\t\tallowWhere: '$block',\n\t\t\tallowChildren: '$text',\n\t\t\t// Disallow `$inlineObject` and its derivatives like `inlineWidget` inside `codeBlock` to ensure that only text,\n\t\t\t// not other inline elements like inline images, are allowed. This maintains the semantic integrity of code blocks.\n\t\t\tdisallowChildren: '$inlineObject',\n\t\t\tallowAttributes: [ 'language' ],\n\t\t\tallowAttributesOf: '$listItem',\n\t\t\tisBlock: true\n\t\t} );\n\n\t\t// Disallow formatting attributes on `codeBlock` children.\n\t\tschema.addAttributeCheck( ( context, attributeName ) => {\n\t\t\tconst parent = context.getItem( context.length - 2 );\n\t\t\tconst isFormatting = schema.getAttributeProperties( attributeName ).isFormatting;\n\n\t\t\tif ( isFormatting && parent && parent.name == 'codeBlock' ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\t// Conversion.\n\t\teditor.editing.downcastDispatcher.on<DowncastInsertEvent>(\n\t\t\t'insert:codeBlock',\n\t\t\tmodelToViewCodeBlockInsertion( model, normalizedLanguagesDefs, true )\n\t\t);\n\t\teditor.data.downcastDispatcher.on<DowncastInsertEvent>(\n\t\t\t'insert:codeBlock',\n\t\t\tmodelToViewCodeBlockInsertion( model, normalizedLanguagesDefs )\n\t\t);\n\t\teditor.data.downcastDispatcher.on<DowncastInsertEvent>(\n\t\t\t'insert:softBreak',\n\t\t\tmodelToDataViewSoftBreakInsertion( model ),\n\t\t\t{ priority: 'high' }\n\t\t);\n\t\teditor.data.upcastDispatcher.on<UpcastElementEvent>(\n\t\t\t'element:code',\n\t\t\tdataViewToModelCodeBlockInsertion( view, normalizedLanguagesDefs )\n\t\t);\n\t\teditor.data.upcastDispatcher.on<UpcastTextEvent>( 'text', dataViewToModelTextNewlinesInsertion() );\n\t\teditor.data.upcastDispatcher.on<UpcastElementEvent>( 'element:pre', dataViewToModelOrphanNodeConsumer(), { priority: 'high' } );\n\n\t\t// Intercept the clipboard input (paste) when the selection is anchored in the code block and force the clipboard\n\t\t// data to be pasted as a single plain text. Otherwise, the code lines will split the code block and\n\t\t// \"spill out\" as separate paragraphs.\n\t\tthis.listenTo( editor.editing.view.document, 'clipboardInput', ( evt, data ) => {\n\t\t\tlet insertionRange = model.createRange( model.document.selection.anchor! );\n\n\t\t\t// Use target ranges in case this is a drop.\n\t\t\tif ( data.targetRanges ) {\n\t\t\t\tinsertionRange = editor.editing.mapper.toModelRange( data.targetRanges[ 0 ] );\n\t\t\t}\n\n\t\t\tif ( !insertionRange.start.parent.is( 'element', 'codeBlock' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst text = data.dataTransfer.getData( 'text/plain' );\n\t\t\tconst writer = new UpcastWriter( editor.editing.view.document );\n\n\t\t\t// Pass the view fragment to the default clipboardInput handler.\n\t\t\tdata.content = rawSnippetTextToViewDocumentFragment( writer, text );\n\t\t} );\n\n\t\tif ( editor.plugins.has( 'ClipboardPipeline' ) ) {\n\t\t\t// Elements may have a plain textual representation (hence be present in the 'text/plain' data transfer),\n\t\t\t// but not be allowed in the code block.\n\t\t\t// Filter them out before inserting the content to the model.\n\t\t\teditor.plugins.get( ClipboardPipeline ).on<ClipboardContentInsertionEvent>( 'contentInsertion', ( evt, data ) => {\n\t\t\t\tconst model = editor.model;\n\t\t\t\tconst selection = model.document.selection;\n\n\t\t\t\tif ( !selection.anchor!.parent.is( 'element', 'codeBlock' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\tconst contentRange = writer.createRangeIn( data.content );\n\n\t\t\t\t\tfor ( const item of [ ...contentRange.getItems() ] ) {\n\t\t\t\t\t\t// Remove all nodes disallowed in the code block.\n\t\t\t\t\t\tif ( item.is( 'node' ) && !schema.checkChild( selection.anchor!, item ) ) {\n\t\t\t\t\t\t\twriter.remove( item );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\t\t}\n\n\t\t// Make sure multi–line selection is always wrapped in a code block when `getSelectedContent()`\n\t\t// is used (e.g. clipboard copy). Otherwise, only the raw text will be copied to the clipboard and,\n\t\t// upon next paste, this bare text will not be inserted as a code block, which is not the best UX.\n\t\t// Similarly, when the selection in a single line, the selected content should be an inline code\n\t\t// so it can be pasted later on and retain it's preformatted nature.\n\t\tthis.listenTo<ModelGetSelectedContentEvent>( model, 'getSelectedContent', ( evt, [ selection ] ) => {\n\t\t\tconst anchor = selection.anchor!;\n\n\t\t\tif ( selection.isCollapsed || !anchor.parent.is( 'element', 'codeBlock' ) || !anchor.hasSameParentAs( selection.focus! ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmodel.change( writer => {\n\t\t\t\tconst docFragment = evt.return!;\n\n\t\t\t\t// fo[o<softBreak></softBreak>b]ar  ->   <codeBlock language=\"...\">[o<softBreak></softBreak>b]<codeBlock>\n\t\t\t\tif (\n\t\t\t\t\tanchor.parent.is( 'element' ) &&\n\t\t\t\t\t( docFragment.childCount > 1 || selection.containsEntireContent( anchor.parent ) )\n\t\t\t\t) {\n\t\t\t\t\tconst codeBlock = writer.createElement( 'codeBlock', anchor.parent.getAttributes() );\n\t\t\t\t\twriter.append( docFragment, codeBlock );\n\n\t\t\t\t\tconst newDocumentFragment = writer.createDocumentFragment();\n\t\t\t\t\twriter.append( codeBlock, newDocumentFragment );\n\n\t\t\t\t\tevt.return = newDocumentFragment;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// \"f[oo]\"                          ->   <$text code=\"true\">oo</text>\n\t\t\t\tconst textNode = docFragment.getChild( 0 )!;\n\n\t\t\t\tif ( schema.checkAttribute( textNode, 'code' ) ) {\n\t\t\t\t\twriter.setAttribute( 'code', true, textNode );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst editor = this.editor;\n\t\tconst commands = editor.commands;\n\t\tconst indent = commands.get( 'indent' );\n\t\tconst outdent = commands.get( 'outdent' );\n\n\t\tif ( indent ) {\n\t\t\t// Priority is highest due to integration with `IndentList` command of `List` plugin.\n\t\t\t// If selection is in a code block we give priority to it. This way list item cannot be indented\n\t\t\t// but if we would give priority to indenting list item then user would have to indent list item\n\t\t\t// as much as possible and only then he could indent code block.\n\t\t\t( indent as MultiCommand ).registerChildCommand( commands.get( 'indentCodeBlock' )!, { priority: 'highest' } );\n\t\t}\n\n\t\tif ( outdent ) {\n\t\t\t( outdent as MultiCommand ).registerChildCommand( commands.get( 'outdentCodeBlock' )! );\n\t\t}\n\n\t\t// Customize the response to the <kbd>Enter</kbd> and <kbd>Shift</kbd>+<kbd>Enter</kbd>\n\t\t// key press when the selection is in the code block. Upon enter key press we can either\n\t\t// leave the block if it's \"two or three enters\" in a row or create a new code block line, preserving\n\t\t// previous line's indentation.\n\t\tthis.listenTo<ViewDocumentEnterEvent>( editor.editing.view.document, 'enter', ( evt, data ) => {\n\t\t\tconst positionParent = editor.model.document.selection.getLastPosition()!.parent;\n\n\t\t\tif ( !positionParent.is( 'element', 'codeBlock' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( !leaveBlockStartOnEnter( editor, data.isSoft ) && !leaveBlockEndOnEnter( editor, data.isSoft ) ) {\n\t\t\t\tbreakLineOnEnter( editor );\n\t\t\t}\n\n\t\t\tdata.preventDefault();\n\t\t\tevt.stop();\n\t\t}, { context: 'pre' } );\n\n\t\tthis._initAriaAnnouncements( );\n\t}\n\n\t/**\n\t * Observe when user enters or leaves code block and set proper aria value in global live announcer.\n\t * This allows screen readers to indicate when the user has entered and left the specified code block.\n\t *\n\t * @internal\n\t */\n\tprivate _initAriaAnnouncements( ) {\n\t\tconst { model, ui, t } = this.editor;\n\t\tconst languageDefs = getNormalizedAndLocalizedLanguageDefinitions( this.editor );\n\n\t\tlet lastFocusedCodeBlock: Element | null = null;\n\n\t\tmodel.document.selection.on<SelectionChangeRangeEvent>( 'change:range', () => {\n\t\t\tconst focusParent = model.document.selection.focus!.parent;\n\n\t\t\tif ( !ui || lastFocusedCodeBlock === focusParent || !focusParent.is( 'element' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( lastFocusedCodeBlock && lastFocusedCodeBlock.is( 'element', 'codeBlock' ) ) {\n\t\t\t\tui.ariaLiveAnnouncer.announce( getCodeBlockAriaAnnouncement( t, languageDefs, lastFocusedCodeBlock, 'leave' ) );\n\t\t\t}\n\n\t\t\tif ( focusParent.is( 'element', 'codeBlock' ) ) {\n\t\t\t\tui.ariaLiveAnnouncer.announce( getCodeBlockAriaAnnouncement( t, languageDefs, focusParent, 'enter' ) );\n\t\t\t}\n\n\t\t\tlastFocusedCodeBlock = focusParent;\n\t\t} );\n\t}\n}\n\n/**\n * Normally, when the Enter (or Shift+Enter) key is pressed, a soft line break is to be added to the\n * code block. Let's try to follow the indentation of the previous line when possible, for instance:\n *\n * ```html\n * // Before pressing enter (or shift enter)\n * <codeBlock>\n * \"    foo()\"[]                   // Indent of 4 spaces.\n * </codeBlock>\n *\n * // After pressing:\n * <codeBlock>\n * \"    foo()\"                 // Indent of 4 spaces.\n * <softBreak></softBreak>     // A new soft break created by pressing enter.\n * \"    \"[]                    // Retain the indent of 4 spaces.\n * </codeBlock>\n * ```\n */\nfunction breakLineOnEnter( editor: Editor ): void {\n\tconst model = editor.model;\n\tconst modelDoc = model.document;\n\t// Use last position as other mechanisms (e.g. condition deciding whether this function should be called) also check that.\n\tconst lastSelectionPosition = modelDoc.selection.getLastPosition()!;\n\tlet leadingWhiteSpaces: string | undefined;\n\n\tconst node = getTextNodeAtLineStart( lastSelectionPosition, model );\n\n\t// Figure out the indentation (white space chars) at the beginning of the line.\n\tif ( node && node.is( '$text' ) ) {\n\t\tleadingWhiteSpaces = getLeadingWhiteSpaces( node );\n\t}\n\n\t// Keeping everything in a change block for a single undo step.\n\teditor.model.change( writer => {\n\t\teditor.execute( 'shiftEnter' );\n\n\t\t// If the line before being broken in two had some indentation, let's retain it\n\t\t// in the new line.\n\t\tif ( leadingWhiteSpaces ) {\n\t\t\twriter.insertText( leadingWhiteSpaces, modelDoc.selection.anchor! );\n\t\t}\n\t} );\n}\n\n/**\n * Leave the code block when Enter (but NOT Shift+Enter) has been pressed twice at the beginning\n * of the code block:\n *\n * ```html\n * // Before:\n * <codeBlock>[]<softBreak></softBreak>foo</codeBlock>\n *\n * // After pressing:\n * <paragraph>[]</paragraph><codeBlock>foo</codeBlock>\n * ```\n *\n * @param isSoftEnter When `true`, enter was pressed along with <kbd>Shift</kbd>.\n * @returns `true` when selection left the block. `false` if stayed.\n */\nfunction leaveBlockStartOnEnter( editor: Editor, isSoftEnter: boolean ): boolean {\n\tconst model = editor.model;\n\tconst modelDoc = model.document;\n\tconst view = editor.editing.view;\n\tconst lastSelectionPosition = modelDoc.selection.getLastPosition()!;\n\tconst nodeAfter = lastSelectionPosition.nodeAfter;\n\n\tif ( isSoftEnter || !modelDoc.selection.isCollapsed || !lastSelectionPosition.isAtStart ) {\n\t\treturn false;\n\t}\n\n\tif ( !isSoftBreakNode( nodeAfter ) ) {\n\t\treturn false;\n\t}\n\n\t// We're doing everything in a single change block to have a single undo step.\n\teditor.model.change( writer => {\n\t\t// \"Clone\" the <codeBlock> in the standard way.\n\t\teditor.execute( 'enter' );\n\n\t\t// The cloned block exists now before the original code block.\n\t\tconst newBlock = modelDoc.selection.anchor!.parent.previousSibling! as Element;\n\n\t\t// Make the cloned <codeBlock> a regular <paragraph> (with clean attributes, so no language).\n\t\twriter.rename( newBlock, DEFAULT_ELEMENT );\n\t\twriter.setSelection( newBlock, 'in' );\n\t\teditor.model.schema.removeDisallowedAttributes( [ newBlock ], writer );\n\n\t\t// Remove the <softBreak> that originally followed the selection position.\n\t\twriter.remove( nodeAfter! );\n\t} );\n\n\t// Eye candy.\n\tview.scrollToTheSelection();\n\n\treturn true;\n}\n\n/**\n * Leave the code block when Enter (but NOT Shift+Enter) has been pressed twice at the end\n * of the code block:\n *\n * ```html\n * // Before:\n * <codeBlock>foo[]</codeBlock>\n *\n * // After first press:\n * <codeBlock>foo<softBreak></softBreak>[]</codeBlock>\n *\n * // After second press:\n * <codeBlock>foo</codeBlock><paragraph>[]</paragraph>\n * ```\n *\n * @param isSoftEnter When `true`, enter was pressed along with <kbd>Shift</kbd>.\n * @returns `true` when selection left the block. `false` if stayed.\n */\nfunction leaveBlockEndOnEnter( editor: Editor, isSoftEnter: boolean ): boolean {\n\tconst model = editor.model;\n\tconst modelDoc = model.document;\n\tconst view = editor.editing.view;\n\tconst lastSelectionPosition = modelDoc.selection.getLastPosition()!;\n\tconst nodeBefore = lastSelectionPosition.nodeBefore;\n\n\tlet emptyLineRangeToRemoveOnEnter: Range;\n\n\tif ( isSoftEnter || !modelDoc.selection.isCollapsed || !lastSelectionPosition.isAtEnd || !nodeBefore || !nodeBefore.previousSibling ) {\n\t\treturn false;\n\t}\n\n\t// When the position is directly preceded by two soft breaks\n\t//\n\t//\t\t<codeBlock>foo<softBreak></softBreak><softBreak></softBreak>[]</codeBlock>\n\t//\n\t// it creates the following range that will be cleaned up before leaving:\n\t//\n\t//\t\t<codeBlock>foo[<softBreak></softBreak><softBreak></softBreak>]</codeBlock>\n\t//\n\tif ( isSoftBreakNode( nodeBefore ) && isSoftBreakNode( nodeBefore.previousSibling ) ) {\n\t\temptyLineRangeToRemoveOnEnter = model.createRange(\n\t\t\tmodel.createPositionBefore( nodeBefore.previousSibling ), model.createPositionAfter( nodeBefore )\n\t\t);\n\t}\n\n\t// When there's some text before the position that is\n\t// preceded by two soft breaks and made purely of white–space characters\n\t//\n\t//\t\t<codeBlock>foo<softBreak></softBreak><softBreak></softBreak>    []</codeBlock>\n\t//\n\t// it creates the following range to clean up before leaving:\n\t//\n\t//\t\t<codeBlock>foo[<softBreak></softBreak><softBreak></softBreak>    ]</codeBlock>\n\t//\n\telse if (\n\t\tisEmptyishTextNode( nodeBefore ) &&\n\t\tisSoftBreakNode( nodeBefore.previousSibling ) &&\n\t\tisSoftBreakNode( nodeBefore.previousSibling.previousSibling )\n\t) {\n\t\temptyLineRangeToRemoveOnEnter = model.createRange(\n\t\t\tmodel.createPositionBefore( nodeBefore.previousSibling.previousSibling! ), model.createPositionAfter( nodeBefore )\n\t\t);\n\t}\n\n\t// When there's some text before the position that is made purely of white–space characters\n\t// and is preceded by some other text made purely of white–space characters\n\t//\n\t//\t\t<codeBlock>foo<softBreak></softBreak>    <softBreak></softBreak>    []</codeBlock>\n\t//\n\t// it creates the following range to clean up before leaving:\n\t//\n\t//\t\t<codeBlock>foo[<softBreak></softBreak>    <softBreak></softBreak>    ]</codeBlock>\n\t//\n\telse if (\n\t\tisEmptyishTextNode( nodeBefore ) &&\n\t\tisSoftBreakNode( nodeBefore.previousSibling ) &&\n\t\tisEmptyishTextNode( nodeBefore.previousSibling.previousSibling ) &&\n\t\tnodeBefore.previousSibling.previousSibling &&\n\t\tisSoftBreakNode( nodeBefore.previousSibling.previousSibling.previousSibling )\n\t) {\n\t\temptyLineRangeToRemoveOnEnter = model.createRange(\n\t\t\tmodel.createPositionBefore( nodeBefore.previousSibling.previousSibling.previousSibling! ),\n\t\t\tmodel.createPositionAfter( nodeBefore )\n\t\t);\n\t}\n\n\t// Not leaving the block in the following cases:\n\t//\n\t//\t\t<codeBlock>    []</codeBlock>\n\t//\t\t<codeBlock>  a []</codeBlock>\n\t//\t\t<codeBlock>foo<softBreak></softBreak>[]</codeBlock>\n\t//\t\t<codeBlock>foo<softBreak></softBreak><softBreak></softBreak>bar[]</codeBlock>\n\t//\t\t<codeBlock>foo<softBreak></softBreak><softBreak></softBreak> a []</codeBlock>\n\t//\n\telse {\n\t\treturn false;\n\t}\n\n\t// We're doing everything in a single change block to have a single undo step.\n\teditor.model.change( writer => {\n\t\t// Remove the last <softBreak>s and all white space characters that followed them.\n\t\twriter.remove( emptyLineRangeToRemoveOnEnter );\n\n\t\t// \"Clone\" the <codeBlock> in the standard way.\n\t\teditor.execute( 'enter' );\n\n\t\tconst newBlock = modelDoc.selection.anchor!.parent as Element;\n\n\t\t// Make the cloned <codeBlock> a regular <paragraph> (with clean attributes, so no language).\n\t\twriter.rename( newBlock, DEFAULT_ELEMENT );\n\t\teditor.model.schema.removeDisallowedAttributes( [ newBlock ], writer );\n\t} );\n\n\t// Eye candy.\n\tview.scrollToTheSelection();\n\n\treturn true;\n}\n\nfunction isEmptyishTextNode( node: Node | null ) {\n\treturn node && node.is( '$text' ) && !node.data.match( /\\S/ );\n}\n\nfunction isSoftBreakNode( node: Node | null ) {\n\treturn node && node.is( 'element', 'softBreak' );\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module code-block/codeblockui\n */\n\nimport { icons, Plugin } from 'ckeditor5/src/core.js';\nimport { Collection } from 'ckeditor5/src/utils.js';\nimport {\n\tViewModel,\n\tSplitButtonView,\n\tcreateDropdown,\n\taddListToDropdown,\n\tMenuBarMenuListItemButtonView,\n\tMenuBarMenuListView,\n\tMenuBarMenuView,\n\tMenuBarMenuListItemView,\n\ttype ListDropdownButtonDefinition\n} from 'ckeditor5/src/ui.js';\n\nimport { getNormalizedAndLocalizedLanguageDefinitions } from './utils.js';\n\nimport type { CodeBlockLanguageDefinition } from './codeblockconfig.js';\nimport type CodeBlockCommand from './codeblockcommand.js';\n\nimport '../theme/codeblock.css';\n\n/**\n * The code block UI plugin.\n *\n * Introduces the `'codeBlock'` dropdown.\n */\nexport default class CodeBlockUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'CodeBlockUI' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst componentFactory = editor.ui.componentFactory;\n\t\tconst normalizedLanguageDefs = getNormalizedAndLocalizedLanguageDefinitions( editor );\n\t\tconst itemDefinitions = this._getLanguageListItemDefinitions( normalizedLanguageDefs );\n\t\tconst command: CodeBlockCommand = editor.commands.get( 'codeBlock' )!;\n\n\t\tcomponentFactory.add( 'codeBlock', locale => {\n\t\t\tconst dropdownView = createDropdown( locale, SplitButtonView );\n\t\t\tconst splitButtonView = dropdownView.buttonView;\n\t\t\tconst accessibleLabel = t( 'Insert code block' );\n\n\t\t\tsplitButtonView.set( {\n\t\t\t\tlabel: accessibleLabel,\n\t\t\t\ttooltip: true,\n\t\t\t\ticon: icons.codeBlock,\n\t\t\t\tisToggleable: true\n\t\t\t} );\n\n\t\t\tsplitButtonView.bind( 'isOn' ).to( command, 'value', value => !!value );\n\n\t\t\tsplitButtonView.on( 'execute', () => {\n\t\t\t\teditor.execute( 'codeBlock', {\n\t\t\t\t\tusePreviousLanguageChoice: true\n\t\t\t\t} );\n\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\tdropdownView.on( 'execute', evt => {\n\t\t\t\teditor.execute( 'codeBlock', {\n\t\t\t\t\tlanguage: ( evt.source as any )._codeBlockLanguage,\n\t\t\t\t\tforceValue: true\n\t\t\t\t} );\n\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\tdropdownView.class = 'ck-code-block-dropdown';\n\t\t\tdropdownView.bind( 'isEnabled' ).to( command );\n\n\t\t\taddListToDropdown( dropdownView, itemDefinitions, {\n\t\t\t\trole: 'menu',\n\t\t\t\tariaLabel: accessibleLabel\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\n\t\tcomponentFactory.add( 'menuBar:codeBlock', locale => {\n\t\t\tconst menuView = new MenuBarMenuView( locale );\n\n\t\t\tmenuView.buttonView.set( {\n\t\t\t\trole: 'menuitem',\n\t\t\t\tlabel: t( 'Code block' ),\n\t\t\t\ticon: icons.codeBlock\n\t\t\t} );\n\n\t\t\tmenuView.bind( 'isEnabled' ).to( command );\n\n\t\t\tconst listView = new MenuBarMenuListView( locale );\n\n\t\t\tlistView.set( {\n\t\t\t\tariaLabel: t( 'Insert code block' )\n\t\t\t} );\n\n\t\t\tfor ( const definition of itemDefinitions ) {\n\t\t\t\tconst listItemView = new MenuBarMenuListItemView( locale, menuView );\n\t\t\t\tconst buttonView = new MenuBarMenuListItemButtonView( locale );\n\n\t\t\t\tbuttonView.bind( ...Object.keys( definition.model ) as Array<keyof MenuBarMenuListItemButtonView> ).to( definition.model );\n\t\t\t\tbuttonView.set( {\n\t\t\t\t\tisToggleable: true,\n\t\t\t\t\trole: 'menuitemcheckbox'\n\t\t\t\t} );\n\n\t\t\t\tbuttonView.delegate( 'execute' ).to( menuView );\n\n\t\t\t\tbuttonView.on( 'execute', () => {\n\t\t\t\t\teditor.execute( 'codeBlock', {\n\t\t\t\t\t\tlanguage: definition.model._codeBlockLanguage as string,\n\t\t\t\t\t\tforceValue: command.value == definition.model._codeBlockLanguage ? false : true\n\t\t\t\t\t} );\n\n\t\t\t\t\teditor.editing.view.focus();\n\t\t\t\t} );\n\n\t\t\t\tlistItemView.children.add( buttonView );\n\t\t\t\tlistView.items.add( listItemView );\n\t\t\t}\n\n\t\t\tmenuView.panelView.children.add( listView );\n\n\t\t\treturn menuView;\n\t\t} );\n\t}\n\n\t/**\n\t * A helper returning a collection of the `codeBlock` dropdown items representing languages\n\t * available for the user to choose from.\n\t */\n\tprivate _getLanguageListItemDefinitions(\n\t\tnormalizedLanguageDefs: Array<CodeBlockLanguageDefinition>\n\t): Collection<ListDropdownButtonDefinition> {\n\t\tconst editor = this.editor;\n\t\tconst command: CodeBlockCommand = editor.commands.get( 'codeBlock' )!;\n\t\tconst itemDefinitions = new Collection<ListDropdownButtonDefinition>();\n\n\t\tfor ( const languageDef of normalizedLanguageDefs ) {\n\t\t\tconst definition: ListDropdownButtonDefinition = {\n\t\t\t\ttype: 'button',\n\t\t\t\tmodel: new ViewModel( {\n\t\t\t\t\t_codeBlockLanguage: languageDef.language,\n\t\t\t\t\tlabel: languageDef.label,\n\t\t\t\t\trole: 'menuitemradio',\n\t\t\t\t\twithText: true\n\t\t\t\t} )\n\t\t\t};\n\n\t\t\tdefinition.model.bind( 'isOn' ).to( command, 'value', value => {\n\t\t\t\treturn value === definition.model._codeBlockLanguage;\n\t\t\t} );\n\n\t\t\titemDefinitions.add( definition );\n\t\t}\n\n\t\treturn itemDefinitions;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module code-block/codeblock\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport CodeBlockEditing from './codeblockediting.js';\nimport CodeBlockUI from './codeblockui.js';\n\n/**\n * The code block plugin.\n *\n * For more information about this feature check the {@glink api/code-block package page} and the\n * {@glink features/code-blocks code block} feature guide.\n *\n * This is a \"glue\" plugin that loads the {@link module:code-block/codeblockediting~CodeBlockEditing code block editing feature}\n * and the {@link module:code-block/codeblockui~CodeBlockUI code block UI feature}.\n */\nexport default class CodeBlock extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ CodeBlockEditing, CodeBlockUI ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'CodeBlock' as const;\n\t}\n}\n"]}