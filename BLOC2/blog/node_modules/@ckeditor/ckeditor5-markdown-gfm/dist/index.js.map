{"version":3,"sources":["index.js","../src/markdown2html/markdown2html.ts","../src/html2markdown/html2markdown.ts","../src/gfmdataprocessor.ts","../src/markdown.ts","../src/pastefrommarkdownexperimental.ts"],"names":["MarkdownToHtml","_parser","_options","gfm","breaks","tables","xhtml","headerIds","constructor","marked","use","tokenizer","autolink","url","renderer","checkbox","args","Object","getPrototypeOf","call","trimRight","code","replace","parse","markdown","autolinkRegex","RegExp","source","UpdatedTurndown","Turndown","escape","string","originalEscape","escaped","lastLinkEnd","match","_matchAutolink","index","substring","matchedURL","length","matchAll","matched","_autolinkFindEnd","assign","char","includes","openBrackets","i","HtmlToMarkdown","_createParser","html","turndown","keep","elements","parser","codeBlockStyle","hr","headingStyle","_todoList","addRule","filter","node","type","parentNode","nodeName","replacement","content","checked","GFMDataProcessor","document","_htmlDP","HtmlDataProcessor","_markdown2html","_html2markdown","keepHtml","element","toView","data","toData","viewFragment","registerRawContentMatcher","pattern","useFillerType","Markdown","Plugin","editor","processor","viewDocument","pluginName","ALLOWED_MARKDOWN_FIRST_LEVEL_TAGS","PasteFromMarkdownExperimental","_gfmDataProcessor","requires","ClipboardPipeline","view","editing","clipboardPipeline","plugins","get","shiftPressed","listenTo","evt","shiftKey","dataAsTextHtml","dataTransfer","getData","dataAsTextPlain","markdownFromHtml","_parseMarkdownFromHtml","htmlString","withoutOsSpecificTags","_removeOsSpecificTags","_containsOnlyAllowedFirstLevelTags","withoutWrapperTag","_removeFirstLevelWrapperTagsAndBrs","_containsAnyRemainingHtmlTags","_replaceHtmlReservedEntitiesWithCharacters","withoutMetaTag","trim","withoutHtmlTag","withoutBodyTag","DOMParser","body","tempElement","parseFromString","tagNames","Array","from","children","map","el","tagName","every","brElements","querySelectorAll","br","replaceWith","outerElements","elementClone","cloneNode","childNodes","innerHTML","str"],"mappings":";;;;AAAA,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AAChE,MAAM,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AAC7E,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;AAChC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC;AAChC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC1C,MAAM,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AAChF;ACKA,CAAA,CAAA,CAAA;ADHA,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;ACKvH,CACM,CAAA,CAAA,CAAA,KAAA,CAAMA,cAAAA,CAAAA,CAAAA;ADJb,CAAC,CAAC,CAAC,CCKMC,OAAuB,CAAA;ADJhC,CAAC,CAAC,CAAC,CCMMC,QAAW,CAAA,CAAA,CAAA,CAAA;ADLpB,CCMEC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAK,CAAA,CAAA,IAAA,CAAA;ADLP,CCMEC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAQ,CAAA,CAAA,IAAA,CAAA;ADLV,CCMEC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAQ,CAAA,CAAA,IAAA,CAAA;ADLV,CCMEC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAO,CAAA,CAAA,IAAA,CAAA;ADLT,CCMEC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,SAAW,CAAA,CAAA,KAAA;ADLb,CAAC,CAAC,CAAC,CAAC,CCMD,CAAA;ADLH,CAAC,CAAC,CAAC,CCOFC,WAAc,CAAA,CAAA,CAAA;ADNf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;ACQnBC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,CAAOC,GAAG,CAAE,CAAA;ADNd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CCORC,SAAW,CAAA,CAAA,CAAA;ADNd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC;ACQtDC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,QAAAA,CAAU,CAAA,CAAA,CAAA,CAAA,CAAM,IAAA,CAAA;AAChBC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAK,CAAA,CAAA,CAAA,CAAA,CAAM,IAAA;AACZ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;ADNH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CCORC,QAAU,CAAA,CAAA,CAAA;AACTC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,QAAAA,CAAAA,CAAU,CAAA,CAAA,CAAGC,IAAgB,CAAA,CAAA,CAAA;ADNjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS;AACrG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC;ACQnE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAOC,MAAOC,CAAAA,cAAc,CAAE,IAAI,CAAGH,CAAAA,QAAQ,CAACI,IAAI,CAAE,IAAI,CAAA,CAAKH,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAOI,SAAS,CAAA,CAAA,CAAA;AAC9E,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAEAC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAM,CAAA,CAAA,CAAGL,IAAgB,CAAA,CAAA,CAAA;ADP7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU;AACnG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC/G,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,KAAK;AAC7G,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC;ACS1G,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAOC,MAAOC,CAAAA,cAAc,CAAE,IAAI,CAAA,CAAGG,IAAI,CAACF,IAAI,CAAE,IAAI,CAAA,CAAA,CAAA,CAAA,CAAKH,IAAOM,CAAAA,CAAAA,OAAO,CAAE,CAAa,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;AACvF,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;ADPF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CCSL,IAAI,CAACrB,OAAO,CAAA,CAAA,CAAGQ,MAAAA,CAAAA;AAChB,CAAA,CAAA,CAAA,CAAA,CAAA;AAEOc,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAOC,QAAgB,CAAW,CAAA,CAAA;ADT1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CCUL,MAAO,CAAA,IAAI,CAACvB,OAAO,CAACsB,KAAK,CAAEC,QAAAA,CAAU,CAAA,IAAI,CAACtB,QAAQ,CAAA,CAAA;AACnD,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA;ADTA;AE/BA,KAAMuB,CAAAA,aAAgB,CAAgB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAIC,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,CAAAA;AAEzC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAkCC,CAAAA,MAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA;AAGxC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAA2EA,CAAAA,MAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,IAAA,CAAA;AAGjF,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAeA,MAAM,CACrB,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AAGD,KAAMC,CAAAA,eAAwBC,CAAAA,OAAAA,CAAAA,QAAAA,CAAAA,CAAAA;AACbC,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,CAAQC,MAAc,CAAW,CAAA,CAAA;AFyBlD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CExBL,KAAA,CAAMC,cAAAA,CAAAA,CAAAA,CAAiB,KAAK,CAACF,MAAAA,CAAAA;AAE7B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,QAASA,CAAAA,MAAAA,CAAQC,MAAc,CAAA,CAAA,CAAA;AAC9BA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,CAASC,CAAAA,CAAAA,cAAgBD,CAAAA,MAAAA,CAAAA,CAAAA;AFwB5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CEtBGA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAASA,CAAAA,CAAAA,CAAAA,MAAAA,CAAOT,OAAO,CAAE,CAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AFuBlC,CErBG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAOS,MAAAA,CAAAA;AACR,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AFsBF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU;AACvG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC;AElB3C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAIE,CAAAA,OAAU,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACd,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAIC,CAAAA,WAAc,CAAA,CAAA,CAAA,CAAA,CAAA;AAElB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAM,KAAMC,CAAAA,KAAS,CAAA,EAAA,CAAA,IAAI,CAACC,cAAc,CAAEL,MAAW,CAAA,CAAA,CAAA;AFmBvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CElBR,KAAA,CAAMM,KAAAA,CAAAA,CAAAA,CAAQF,KAAAA,CAAME,KAAK,CAAA;AFmB5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;AEhB1F,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAKA,CAAAA,CAAAA,KAAAA,CAAQH,CAAAA,CAAAA,WAAc,CAAA,CAAA,CAAA;AAC1BD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,OAAAA,CAAAA,CAAAA,CAAAA,CAAWH,MAAQC,CAAAA,MAAAA,CAAOO,SAAS,CAAEJ,WAAaG,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA;AACnD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AFkBH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CEhBR,KAAA,CAAME,UAAAA,CAAAA,CAAAA,CAAaJ,KAAK,CAAE,CAAG,CAAA,CAAA;AFiBhC,CEfGF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,OAAWM,CAAAA,CAAAA,CAAAA,CAAAA,UAAAA,CAAAA;AFgBd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CEdRL,WAAcG,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAQE,UAAAA,CAAWC,MAAM,CAAA;AACxC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AFeF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC;AAC7E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CEbL,EAAA,CAAA,CAAKN,WAAAA,CAAAA,CAAAA,CAAcH,MAAOS,CAAAA,MAAM,CAAG,CAAA,CAAA;AAClCP,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,OAAAA,CAAAA,CAAAA,CAAAA,CAAWH,MAAAA,CAAQC,MAAOO,CAAAA,SAAS,CAAEJ,WAAAA,CAAAA,CAAaH,MAAAA,CAAOS,MAAM,CAAA,CAAA,CAAA;AAChE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AFcF,CEZE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAOP,OAAAA,CAAAA;AACR,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AFYD,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CEVH,CAASG,cAAgBL,CAAAA,MAAc,CAAG,CAAA,CAAA;AACzC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAM,KAAMI,CAAAA,KAAAA,CAASJ,EAAAA,CAAAA,MAAOU,CAAAA,QAAQ,CAAEhB,aAAkB,CAAA,CAAA,CAAA;AFW1D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CEVR,KAAA,CAAMiB,OAAAA,CAAAA,CAAAA,CAAUP,KAAK,CAAE,CAAG,CAAA,CAAA;AAC1B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMK,MAAS,CAAA,CAAA,CAAA,IAAI,CAACG,gBAAgB,CAAED,OAAAA,CAAAA,CAAAA;AFWzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CETR,KAAMzB,CAAAA,MAAAA,CAAO2B,MAAM,CAClB,CAAA;AFSJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CETTF,OAAQJ,CAAAA,SAAS,CAAE,CAAGE,CAAAA,CAAAA,MAAAA,CAAAA;AFU5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CEV0B,CAClC,CAAA,CAAA;AAAEH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAOF,KAAAA,CAAME,KAAK;AAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AFYzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;AERjH,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AFSD,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AACjF,CEPSM,CAAAA,CAAAA,CAAAA,CAAAA,gBAAkBZ,CAAAA,MAAc,CAAG,CAAA,CAAA;AFQ5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CEPL,GAAA,CAAIS,MAAAA,CAAAA,CAAAA,CAAST,MAAAA,CAAOS,MAAM,CAAA;AAE1B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAQA,CAAAA,MAAAA,CAAS,CAAA,CAAA,CAAI,CAAA,CAAA;AACpB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMK,IAAOd,CAAAA,CAAAA,CAAAA,MAAM,CAAES,MAAAA,CAAAA,CAAAA,CAAS,CAAG,CAAA,CAAA;AFOpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CELR,EAAA,CAAA,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAcM,QAAQ,CAAED,IAAS,CAAA,CAAA,CAAA,CAAA;AACrCL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA;AFMJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CELF,CAAA,IAAA,CAAA,EAAA,CAAA,CAAKK,IAAAA,CAAAA,CAAAA,CAAAA,CAAQ,CAAA,CAAA,CAAM,CAAA,CAAA,CAAA;AACzB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAIE,CAAAA,YAAe,CAAA,CAAA,CAAA,CAAA,CAAA;AAEnB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAM,CAAA,GAAA,CAAIC,CAAAA,CAAAA,CAAAA,CAAI,CAAGA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAIR,MAAAA,CAAAA,CAAQQ,CAAM,CAAA,CAAA,CAAA,CAAA;AAClC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAKjB,MAAM,CAAEiB,CAAG,CAAA,CAAA,CAAA,CAAA,CAAI,CAAA,CAAA,CAAM,CAAA,CAAA,CAAA;AACzBD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,YAAAA,CAAAA,CAAAA,CAAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAO,EAAA,CAAA,CAAKhB,MAAM,CAAEiB,CAAAA,CAAG,CAAA,CAAA,CAAA,CAAI,CAAA,CAAA,CAAM,CAAA,CAAA,CAAA;AAChCD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,YAAAA,CAAAA,CAAAA,CAAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AFKJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;AEFvG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAKA,CAAAA,CAAAA,YAAAA,CAAe,CAAA,CAAA,CAAI,CAAA,CAAA,CAAA;AACvBP,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA;AFIL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CEHL,CAAA,IAAA,CAAA,CAAA;AACN,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AFIJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CEHF,CAAA,IAAA,CAAA,CAAA;AACN,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AFIF,CEFE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAOA,MAAAA,CAAAA;AACR,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA;AAEA,CAAA,CAAA,CAAA;AFEA,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC;AEAvH,CACM,CAAA,CAAA,CAAA,KAAA,CAAMS,cAAAA,CAAAA,CAAAA;AFCb,CAAC,CAAC,CAAC,CEAMhD,OAAyB,CAAA;AFClC,CAAC,CAAC,CAAC,CECFO,WAAc,CAAA,CAAA,CAAA;AACb,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAI,CAACP,OAAO,CAAA,CAAA,CAAG,IAAI,CAACiD,aAAa,CAAA,CAAA,CAAA;AAClC,CAAA,CAAA,CAAA,CAAA,CAAA;AAEO3B,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAO4B,IAAY,CAAW,CAAA,CAAA;AACpC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAO,IAAI,CAAClD,OAAO,CAACmD,QAAQ,CAAED,IAAAA,CAAAA,CAAAA;AAC/B,CAAA,CAAA,CAAA,CAAA,CAAA;AAEOE,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAMC,QAAyB,CAAS,CAAA,CAAA;AAC9C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAI,CAACrD,OAAO,CAACoD,IAAI,CAAEC,QAAAA,CAAAA,CAAAA;AACpB,CAAA,CAAA,CAAA,CAAA,CAAA;AFFD,CAAC,CAAC,CAAC,CEIMJ,aAAiC,CAAA,CAAA,CAAA,CAAA;AFH1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CEIL,KAAMK,CAAAA,MAAAA,CAAS,CAAA,CAAA,GAAA,CAAI3B,eAAiB,CAAA,CAAA;AFHtC,CEIG4B,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,cAAgB,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA;AFHnB,CEIGC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAI,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AFHP,CEIGC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,YAAc,CAAA,CAAA,CAAA,GAAA,CAAA;AACf,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAEAH,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,CAAO7C,GAAG,CAAE,CAAA;AACXP,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA;AACA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAI,CAACwD,SAAS;AACd,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AFJH,CEME,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAOJ,MAAAA,CAAAA;AACR,CAAA,CAAA,CAAA,CAAA,CAAA;AFLD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;AEQ7FI,CAAAA,CAAAA,CAAAA,CAAAA,SAAAA,CAAWP,QAAyB,CAAS,CAAA,CAAA;AFNtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CEOLA,QAASQ,CAAAA,OAAO,CAAE,CAAA,aAAA,CAAiB,CAAA,CAAA,CAAA;AAClCC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAQC,IAAS,CAAA,CAAA,CAAA;AAChB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAOA,CAAAA,IAAKC,CAAAA,IAAI,CAAA,CAAA,CAAA,CAAA,CAAK,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,IAAA,CAAA,EAAA,CAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,MAAA,CAAA,SAAA,CAAA;AAElBD,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAKE,CAAAA,UAAU,CAACC,QAAQ,CAAA,CAAA,CAAA,CAAA,CAAK,CAAA,EAAA,CAAA,CAAQH,CAAAA,CAAAA,CAAAA,IAAKE,CAAAA,UAAU,CAACA,UAAU,CAACC,QAAQ,CAAK,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAG,CAAA,CAAA;AACpF,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AFPH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CEQRC,WAAaC,CAAAA,CAAAA,OAAY,CAAA,CAAEL,IAAS,CAAA,CAAA,CAAA;AACnC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAO,CAAEA,IAAAA,CAAKM,OAAO,CAAG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAQ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAI,CAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAC3C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA;AFPA;AGhJA,CAAA,CAAA,CAAA;AHkJA,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC;AACzF,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC;AGhJ7F,CACc,CAAA,CAAA,CAAA,KAAA,CAAMC,gBAAAA,CAAAA,CAAAA;AACpB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AHiJD,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC;AG/IxG,CAAA,CAAA,CAAA,CAAA,CACD,OAAmC,CAAA;AAEnC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AH+ID,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;AG7IzC,CAAA,CAAA,CAAA,CAAA,CACD,cAAuC,CAAA;AAEvC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AH6ID,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC;AG3IzC,CAAA,CAAA,CAAA,CAAA,CACD,cAAuC,CAAA;AAEvC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AH2ID,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;AAChE,CGzIC7D,CAAAA,CAAAA,CAAAA,CAAAA,WAAAA,CAAa8D,QAAsB,CAAG,CAAA;AACrC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAI,CAACC,OAAO,CAAA,CAAA,CAAG,GAAA,CAAIC,iBAAmBF,CAAAA,QAAAA,CAAAA,CAAAA;AH0IxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CGzIL,IAAI,CAACG,cAAc,CAAA,CAAA,CAAG,GAAIzE,CAAAA,cAAAA,CAAAA,CAAAA,CAAAA;AH0I5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CGzIL,IAAI,CAAC0E,cAAc,CAAA,CAAA,CAAG,GAAIzB,CAAAA,cAAAA,CAAAA,CAAAA,CAAAA;AAC3B,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AHyID,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ;AAC5F,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC;AACxE,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;AAC1C,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;AAC/C,CGvIQ0B,CAAAA,CAAAA,CAAAA,CAAAA,QAAUC,CAAAA,OAAoC,CAAS,CAAA,CAAA;AAC7D,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAI,CAACF,cAAc,CAACrB,IAAI,CAAE,CAAA;AAAEuB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,OAAAA;AAAS,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACtC,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AHyID,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;AACzD,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC;AACxC,CGvIQC,CAAAA,CAAAA,CAAAA,CAAAA,MAAQC,CAAAA,IAAY,CAAyB,CAAA,CAAA;AACnD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAM3B,IAAAA,CAAAA,CAAAA,CAAO,IAAI,CAACsB,cAAc,CAAClD,KAAK,CAAEuD,IAAAA,CAAAA,CAAAA;AACxC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAO,IAAI,CAACP,OAAO,CAACM,MAAM,CAAE1B,IAAAA,CAAAA,CAAAA;AAC7B,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AHuID,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI;AACrH,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC;AAC9B,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;AAC7B,CGrIQ4B,CAAAA,CAAAA,CAAAA,CAAAA,MAAQC,CAAAA,YAAkC,CAAW,CAAA,CAAA;AAC3D,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAM7B,IAAAA,CAAAA,CAAAA,CAAO,IAAI,CAACoB,OAAO,CAACQ,MAAM,CAAEC,YAAAA,CAAAA,CAAAA;AAClC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAO,IAAI,CAACN,cAAc,CAACnD,KAAK,CAAE4B,IAAAA,CAAAA,CAAAA;AACnC,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AHqID,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI;AAC/H,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;AAC3E,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;AAC1H,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM;AAC9E,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC;AAC3B,CGnIQ8B,CAAAA,CAAAA,CAAAA,CAAAA,yBAA2BC,CAAAA,OAAuB,CAAS,CAAA,CAAA;AACjE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAI,CAACX,OAAO,CAACU,yBAAyB,CAAEC,OAAAA,CAAAA,CAAAA;AACzC,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AHmID,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG;AAC3G,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC;AAC9F,CGjIQC,CAAAA,CAAAA,CAAAA,CAAAA,aAAAA,CAAAA,CAAAA,CAAsB,CAAC,CAAA;AAC/B,CAAA;AHkIA;AI7NA,CAAA,CAAA,CAAA;AJ+NA,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;AAC7C,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;AACxF,CAAC,CAAC,CAAC,CI7NY,KAAMC,CAAAA,QAAiBC,CAAAA,OAAAA,CAAAA,MAAAA,CAAAA,CAAAA;AACrC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AJ8ND,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU;AACf,CI5NC7E,CAAAA,CAAAA,CAAAA,CAAAA,WAAAA,CAAa8E,MAAc,CAAG,CAAA;AAC7B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAK,CAAEA,MAAAA,CAAAA,CAAAA;AJ6NT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CI3NLA,MAAOR,CAAAA,IAAI,CAACS,SAAS,CAAG,CAAA,CAAA,GAAA,CAAIlB,gBAAkBiB,CAAAA,MAAAA,CAAOR,IAAI,CAACU,YAAY,CAAA,CAAA;AACvE,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AJ2ND,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU;AIzNb,CACD,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,GAAA,CAAkBC,UAAa,CAAA,CAAA,CAAA,CAAA;AJ0NhC,CIzNE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAO,CAAA,QAAA,CAAA,CAAA;AACR,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA;AJ0NA;AK7OA,KAAA,CAAMC,iCAAoC,CAAA,CAAA,CAAA,CAAA;AAAE,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA;AAAQ,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAAM,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AAAO,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA;AAAQ,CAAA,CAAA;AAEzE,CAAA,CAAA,CAAA;ALmPA,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC;AACnD,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;AAC5G,CAAC,CAAC,CAAC,CKjPY,KAAMC,CAAAA,6BAAsCN,CAAAA,OAAAA,CAAAA,MAAAA,CAAAA,CAAAA;AAC1D,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;ALkPD,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ;AKhPX,CAAA,CAAA,CAAA,CAAA,CACD,iBAA4C,CAAA;AAE5C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;ALgPD,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU;AACf,CK9OC7E,CAAAA,CAAAA,CAAAA,CAAAA,WAAAA,CAAa8E,MAAc,CAAG,CAAA;AAC7B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAK,CAAEA,MAAAA,CAAAA,CAAAA;AL+OT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CK7OL,IAAI,CAACM,iBAAiB,CAAA,CAAA,CAAG,GAAIvB,CAAAA,gBAAAA,CAAkBiB,MAAOR,CAAAA,IAAI,CAACU,YAAY,CAAA,CAAA;AACxE,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AL6OD,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU;AK3Ob,CACD,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,GAAA,CAAkBC,UAAa,CAAA,CAAA,CAAA,CAAA;AL4OhC,CK3OE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAO,CAAA,6BAAA,CAAA,CAAA;AACR,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AL2OD,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU;AKzOb,CACD,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,GAAA,CAAkBI,QAAW,CAAA,CAAA,CAAA,CAAA;AL0O9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CKzOL,MAAO,CAAA,CAAA;AAAEC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,iBAAAA;AAAmB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAC7B,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AL2OD,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU;AKzOb,CAAA,CAAA,CAAA,CAAA,CACD,IAAoB,CAAA,CAAA,CAAA,CAAA;AL0OrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CKzOL,KAAA,CAAMR,MAAAA,CAAAA,CAAAA,CAAS,IAAI,CAACA,MAAM,CAAA;AAC1B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMS,IAAOT,CAAAA,CAAAA,CAAAA,MAAAA,CAAOU,OAAO,CAACD,IAAI,CAAA;AL0OlC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CKzOL,KAAA,CAAMP,YAAAA,CAAAA,CAAAA,CAAeO,IAAAA,CAAKzB,QAAQ,CAAA;AAElC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAM2B,iBAAuCX,CAAAA,CAAAA,CAAAA,MAAAA,CAAOY,OAAO,CAACC,GAAG,CAAE,CAAA,iBAAA,CAAA,CAAA,CAAA;AAEjE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAIC,CAAAA,YAAe,CAAA,CAAA,CAAA,KAAA,CAAA;AAEnB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAI,CAACC,QAAQ,CAA4Bb,YAAc,CAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAAW,CAAEc,GAAKxB,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AACxEsB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,YAAAA,CAAAA,CAAAA,CAAetB,IAAAA,CAAKyB,QAAQ,CAAA;AAC7B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAI,CAACF,QAAQ,CAAqCJ,iBAAmB,CAAA,CAAA,CAAA,mBAAA,CAAA,CAAA,CAAuB,CAAEK,GAAKxB,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAClG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAKsB,YAAe,CAAA,CAAA,CAAA;AACnB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMI,cAAiB1B,CAAAA,CAAAA,CAAAA,IAAAA,CAAK2B,YAAY,CAACC,OAAO,CAAE,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAElD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAK,CAACF,cAAiB,CAAA,CAAA,CAAA;AACtB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMG,eAAkB7B,CAAAA,CAAAA,CAAAA,IAAAA,CAAK2B,YAAY,CAACC,OAAO,CAAE,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AAEnD5B,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAKX,OAAO,CAAA,CAAA,CAAG,IAAI,CAACyB,iBAAiB,CAACf,MAAM,CAAE8B,eAAAA,CAAAA,CAAAA;AAE9C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMC,gBAAmB,CAAA,CAAA,CAAA,IAAI,CAACC,sBAAsB,CAAEL,cAAAA,CAAAA,CAAAA;AAEtD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAKI,gBAAmB,CAAA,CAAA,CAAA;AACvB9B,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAKX,OAAO,CAAA,CAAA,CAAG,IAAI,CAACyB,iBAAiB,CAACf,MAAM,CAAE+B,gBAAAA,CAAAA,CAAAA;AAC/C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AL+ND,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC;AACnG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC;AAC3G,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;AAC5G,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;AAC3F,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;AACvE,CK7NSC,CAAAA,CAAAA,CAAAA,CAAAA,sBAAwBC,CAAAA,UAAkB,CAAkB,CAAA,CAAA;AACnE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMC,qBAAwB,CAAA,CAAA,CAAA,IAAI,CAACC,qBAAqB,CAAEF,UAAAA,CAAAA,CAAAA;AAE1D,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAK,CAAC,IAAI,CAACG,kCAAkC,CAAEF,qBAA0B,CAAA,CAAA,CAAA,CAAA;AL6N3E,CK5NG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAO,IAAA,CAAA;AACR,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMG,iBAAoB,CAAA,CAAA,CAAA,IAAI,CAACC,kCAAkC,CAAEJ,qBAAAA,CAAAA,CAAAA;AAEnE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAK,IAAI,CAACK,6BAA6B,CAAEF,iBAAsB,CAAA,CAAA,CAAA,CAAA;AL2NjE,CK1NG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAO,IAAA,CAAA;AACR,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AL2NF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CKzNL,MAAA,CAAO,IAAI,CAACG,0CAA0C,CAAEH,iBAAAA,CAAAA,CAAAA;AACzD,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;ALyND,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC;AAC7B,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;AACvE,CKvNSF,CAAAA,CAAAA,CAAAA,CAAAA,qBAAuBF,CAAAA,UAAkB,CAAW,CAAA,CAAA;ALwN7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC;AKtNhD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAMQ,CAAAA,cAAAA,CAAiBR,CAAAA,CAAAA,UAAWxF,CAAAA,OAAO,CAAE,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAkB,CAAA,CAAA,CAAA,CAAKiG,IAAI,CAAA,CAAA,CAAA;ALwNxE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC;AACtD,CKvNE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMC,cAAAA,CAAiBF,CAAAA,CAAAA,cAAehG,CAAAA,OAAO,CAAE,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAW,CAAA,CAAA,CAAA,CAAA,CAAKA,OAAO,CAAE,CAAa,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAKiG,IAAI,CAAA,CAAA,CAAA;ALwNhG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC;AACtD,CKvNE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAME,cAAAA,CAAiBD,CAAAA,CAAAA,cAAelG,CAAAA,OAAO,CAAE,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAW,CAAA,CAAA,CAAA,CAAA,CAAKA,OAAO,CAAE,CAAa,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAKiG,IAAI,CAAA,CAAA,CAAA;ALwNhG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CKtNL,MAAA,CAAOE,cAAAA,CAAenG,OAAO,CAAE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,aAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAyB,CAAA,CAAA,CAAA,CAAKA,OAAO,CAAE,CAAA,CAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,CAAuB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAKiG,IAAI,CAAA,CAAA,CAAA;AACvG,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;ALsND,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI;AACrE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC;AACnE,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC;AACxC,CKpNSN,CAAAA,CAAAA,CAAAA,CAAAA,kCAAoCH,CAAAA,UAAkB,CAAY,CAAA,CAAA;AACzE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMvD,MAAAA,CAAAA,CAAAA,CAAS,GAAImE,CAAAA,SAAAA,CAAAA,CAAAA,CAAAA;ALqNrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CKpNL,KAAM,CAAA,CAAA,CAAEC,IAAAA,CAAAA,CAAMC,WAAW,CAAE,CAAA,CAAA,CAAA,CAAGrE,MAAOsE,CAAAA,eAAe,CAAEf,UAAY,CAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAElE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMgB,QAAWC,CAAAA,CAAAA,CAAAA,KAAAA,CAAMC,IAAI,CAAEJ,WAAYK,CAAAA,QAAQ,CAAGC,CAAAA,GAAG,CAAEC,CAAAA,EAAMA,CAAAA,CAAAA,CAAAA,EAAAA,CAAGC,OAAO,CAAA,CAAA;AAEzE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAON,CAAAA,QAAAA,CAASO,KAAK,CAAEF,CAAAA,EAAMzC,CAAAA,CAAAA,CAAAA,iCAAAA,CAAkC5C,QAAQ,CAAEqF,EAAAA,CAAAA,CAAAA,CAAAA;AAC1E,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;ALkND,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;AACxE,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC;AACrE,CKhNShB,CAAAA,CAAAA,CAAAA,CAAAA,kCAAoCL,CAAAA,UAAkB,CAAW,CAAA,CAAA;AACxE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMvD,MAAAA,CAAAA,CAAAA,CAAS,GAAImE,CAAAA,SAAAA,CAAAA,CAAAA,CAAAA;ALiNrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CKhNL,KAAM,CAAA,CAAA,CAAEC,IAAAA,CAAAA,CAAMC,WAAW,CAAE,CAAA,CAAA,CAAA,CAAGrE,MAAOsE,CAAAA,eAAe,CAAEf,UAAY,CAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA;ALiNpE,CK/ME,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMwB,UAAAA,CAAaV,CAAAA,CAAAA,WAAYW,CAAAA,gBAAgB,CAAE,CAAA,EAAA,CAAA,CAAA,CAAA;ALgNnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CK9ML,GAAM,CAAA,CAAA,KAAA,CAAMC,EAAAA,CAAAA,EAAAA,CAAMF,UAAa,CAAA,CAAA;AAC9BE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAGC,WAAW,CAAE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACjB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AL+MF,CK7ME,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMC,aAAAA,CAAgBd,CAAAA,CAAAA,WAAYW,CAAAA,gBAAgB,CAAE,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AL8MtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CK5ML,GAAM,CAAA,CAAA,KAAA,CAAM3D,OAAAA,CAAAA,EAAAA,CAAW8D,aAAgB,CAAA,CAAA;AL6MzC,CK5MG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAMC,YAAAA,CAAe/D,CAAAA,CAAAA,OAAQgE,CAAAA,SAAS,CAAE,IAAA,CAAA,CAAA;AL6M3C,CK5MGhE,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,OAAQ6D,CAAAA,WAAW,CAAKE,CAAAA,CAAAA,CAAAA,YAAAA,CAAaE,UAAU,CAAA,CAAA;AAChD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAOjB,CAAAA,WAAAA,CAAYkB,SAAS,CAAA;AAC7B,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AL2MD,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;AAClD,CKzMS1B,CAAAA,CAAAA,CAAAA,CAAAA,6BAA+B2B,CAAAA,GAAW,CAAY,CAAA,CAAA;AL0M/D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CKzML,MAAA,CAAOA,GAAAA,CAAIjG,QAAQ,CAAE,CAAA,CAAA,CAAA,CAAA,CAAA;AACtB,CAAA,CAAA,CAAA,CAAA,CAAA;AAEA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;ALyMD,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC;AACnE,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;AACzD,CKvMSuE,CAAAA,CAAAA,CAAAA,CAAAA,0CAA4CP,CAAAA,UAAkB,CAAG,CAAA,CAAA;ALwM1E,CKvME,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAOA,UAAAA,CACLxF,OAAO,CAAE,CAAS,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAClBA,OAAO,CAAE,CAAS,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAClBA,OAAO,CAAE,CAAW,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACvB,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,CAAA;ALqMA;AACA,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,6BAA6B,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG","file":"index.js.map","sourcesContent":["import { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { HtmlDataProcessor } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { marked } from 'marked';\nimport Turndown from 'turndown';\nimport { gfm } from 'turndown-plugin-gfm';\nimport { ClipboardPipeline } from '@ckeditor/ckeditor5-clipboard/dist/index.js';\n\n/**\n * This is a helper class used by the {@link module:markdown-gfm/markdown Markdown feature} to convert Markdown to HTML.\n */ class MarkdownToHtml {\n    _parser;\n    _options = {\n        gfm: true,\n        breaks: true,\n        tables: true,\n        xhtml: true,\n        headerIds: false\n    };\n    constructor(){\n        // Overrides.\n        marked.use({\n            tokenizer: {\n                // Disable the autolink rule in the lexer.\n                autolink: ()=>null,\n                url: ()=>null\n            },\n            renderer: {\n                checkbox (...args) {\n                    // Remove bogus space after <input type=\"checkbox\"> because it would be preserved\n                    // by DomConverter as it's next to an inline object.\n                    return Object.getPrototypeOf(this).checkbox.call(this, ...args).trimRight();\n                },\n                code (...args) {\n                    // Since marked v1.2.8, every <code> gets a trailing \"\\n\" whether it originally\n                    // ended with one or not (see https://github.com/markedjs/marked/issues/1884 to learn why).\n                    // This results in a redundant soft break in the model when loaded into the editor, which\n                    // is best prevented at this stage. See https://github.com/ckeditor/ckeditor5/issues/11124.\n                    return Object.getPrototypeOf(this).code.call(this, ...args).replace('\\n</code>', '</code>');\n                }\n            }\n        });\n        this._parser = marked;\n    }\n    parse(markdown) {\n        return this._parser.parse(markdown, this._options);\n    }\n}\n\nconst autolinkRegex = /* #__PURE__ */ new RegExp(// Prefix.\n/\\b(?:(?:https?|ftp):\\/\\/|www\\.)/.source + // Domain name.\n/(?![-_])(?:[-_a-z0-9\\u00a1-\\uffff]{1,63}\\.)+(?:[a-z\\u00a1-\\uffff]{2,63})/.source + // The rest.\n/(?:[^\\s<>]*)/.source, 'gi');\nclass UpdatedTurndown extends Turndown {\n    escape(string) {\n        const originalEscape = super.escape;\n        function escape(string) {\n            string = originalEscape(string);\n            // Escape \"<\".\n            string = string.replace(/</g, '\\\\<');\n            return string;\n        }\n        // Urls should not be escaped. Our strategy is using a regex to find them and escape everything\n        // which is out of the matches parts.\n        let escaped = '';\n        let lastLinkEnd = 0;\n        for (const match of this._matchAutolink(string)){\n            const index = match.index;\n            // Append the substring between the last match and the current one (if anything).\n            if (index > lastLinkEnd) {\n                escaped += escape(string.substring(lastLinkEnd, index));\n            }\n            const matchedURL = match[0];\n            escaped += matchedURL;\n            lastLinkEnd = index + matchedURL.length;\n        }\n        // Add text after the last link or at the string start if no matches.\n        if (lastLinkEnd < string.length) {\n            escaped += escape(string.substring(lastLinkEnd, string.length));\n        }\n        return escaped;\n    }\n    /**\n\t * Trimming end of link.\n\t * https://github.github.com/gfm/#autolinks-extension-\n\t */ *_matchAutolink(string) {\n        for (const match of string.matchAll(autolinkRegex)){\n            const matched = match[0];\n            const length = this._autolinkFindEnd(matched);\n            yield Object.assign([\n                matched.substring(0, length)\n            ], {\n                index: match.index\n            });\n        // We could adjust regex.lastIndex but it's not needed because what we skipped is for sure not a valid URL.\n        }\n    }\n    /**\n\t * Returns the new length of the link (after it would trim trailing characters).\n\t */ _autolinkFindEnd(string) {\n        let length = string.length;\n        while(length > 0){\n            const char = string[length - 1];\n            if ('?!.,:*_~\\'\"'.includes(char)) {\n                length--;\n            } else if (char == ')') {\n                let openBrackets = 0;\n                for(let i = 0; i < length; i++){\n                    if (string[i] == '(') {\n                        openBrackets++;\n                    } else if (string[i] == ')') {\n                        openBrackets--;\n                    }\n                }\n                // If there is fewer opening brackets then closing ones we should remove a closing bracket.\n                if (openBrackets < 0) {\n                    length--;\n                } else {\n                    break;\n                }\n            } else {\n                break;\n            }\n        }\n        return length;\n    }\n}\n/**\n * This is a helper class used by the {@link module:markdown-gfm/markdown Markdown feature} to convert HTML to Markdown.\n */ class HtmlToMarkdown {\n    _parser;\n    constructor(){\n        this._parser = this._createParser();\n    }\n    parse(html) {\n        return this._parser.turndown(html);\n    }\n    keep(elements) {\n        this._parser.keep(elements);\n    }\n    _createParser() {\n        const parser = new UpdatedTurndown({\n            codeBlockStyle: 'fenced',\n            hr: '---',\n            headingStyle: 'atx'\n        });\n        parser.use([\n            gfm,\n            this._todoList\n        ]);\n        return parser;\n    }\n    // This is a copy of the original taskListItems rule from turndown-plugin-gfm, with minor changes.\n    _todoList(turndown) {\n        turndown.addRule('taskListItems', {\n            filter (node) {\n                return node.type === 'checkbox' && // Changes here as CKEditor outputs a deeper structure.\n                (node.parentNode.nodeName === 'LI' || node.parentNode.parentNode.nodeName === 'LI');\n            },\n            replacement (content, node) {\n                return (node.checked ? '[x]' : '[ ]') + ' ';\n            }\n        });\n    }\n}\n\n/**\n * This data processor implementation uses GitHub Flavored Markdown as input/output data.\n *\n * See the {@glink features/markdown Markdown output} guide to learn more on how to enable it.\n */ class GFMDataProcessor {\n    /**\n\t * HTML data processor used to process HTML produced by the Markdown-to-HTML converter and the other way.\n\t */ _htmlDP;\n    /**\n\t * Helper for converting Markdown to HTML.\n\t */ _markdown2html;\n    /**\n\t * Helper for converting HTML to Markdown.\n\t */ _html2markdown;\n    /**\n\t * Creates a new instance of the Markdown data processor class.\n\t */ constructor(document){\n        this._htmlDP = new HtmlDataProcessor(document);\n        this._markdown2html = new MarkdownToHtml();\n        this._html2markdown = new HtmlToMarkdown();\n    }\n    /**\n\t * Keeps the specified element in the output as HTML. This is useful if the editor contains\n\t * features producing HTML that is not a part of the Markdown standard.\n\t *\n\t * By default, all HTML tags are removed.\n\t *\n\t * @param element The element name to be kept.\n\t */ keepHtml(element) {\n        this._html2markdown.keep([\n            element\n        ]);\n    }\n    /**\n\t * Converts the provided Markdown string to a view tree.\n\t *\n\t * @param data A Markdown string.\n\t * @returns The converted view element.\n\t */ toView(data) {\n        const html = this._markdown2html.parse(data);\n        return this._htmlDP.toView(html);\n    }\n    /**\n\t * Converts the provided {@link module:engine/view/documentfragment~DocumentFragment} to data format &ndash; in this\n\t * case to a Markdown string.\n\t *\n\t * @returns Markdown string.\n\t */ toData(viewFragment) {\n        const html = this._htmlDP.toData(viewFragment);\n        return this._html2markdown.parse(html);\n    }\n    /**\n\t * Registers a {@link module:engine/view/matcher~MatcherPattern} for view elements whose content should be treated as raw data\n\t * and not processed during the conversion from Markdown to view elements.\n\t *\n\t * The raw data can be later accessed by a\n\t * {@link module:engine/view/element~Element#getCustomProperty custom property of a view element} called `\"$rawContent\"`.\n\t *\n\t * @param pattern The pattern matching all view elements whose content should\n\t * be treated as raw data.\n\t */ registerRawContentMatcher(pattern) {\n        this._htmlDP.registerRawContentMatcher(pattern);\n    }\n    /**\n\t * This method does not have any effect on the data processor result. It exists for compatibility with the\n\t * {@link module:engine/dataprocessor/dataprocessor~DataProcessor `DataProcessor` interface}.\n\t */ useFillerType() {}\n}\n\n/**\n * The GitHub Flavored Markdown (GFM) plugin.\n *\n * For a detailed overview, check the {@glink features/markdown Markdown feature} guide.\n */ class Markdown extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.data.processor = new GFMDataProcessor(editor.data.viewDocument);\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Markdown';\n    }\n}\n\nconst ALLOWED_MARKDOWN_FIRST_LEVEL_TAGS = [\n    'SPAN',\n    'BR',\n    'PRE',\n    'CODE'\n];\n/**\n * The GitHub Flavored Markdown (GFM) paste plugin.\n *\n * For a detailed overview, check the {@glink features/pasting/paste-markdown Paste Markdown feature} guide.\n */ class PasteFromMarkdownExperimental extends Plugin {\n    /**\n\t * @internal\n\t */ _gfmDataProcessor;\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this._gfmDataProcessor = new GFMDataProcessor(editor.data.viewDocument);\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'PasteFromMarkdownExperimental';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ClipboardPipeline\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const clipboardPipeline = editor.plugins.get('ClipboardPipeline');\n        let shiftPressed = false;\n        this.listenTo(viewDocument, 'keydown', (evt, data)=>{\n            shiftPressed = data.shiftKey;\n        });\n        this.listenTo(clipboardPipeline, 'inputTransformation', (evt, data)=>{\n            if (shiftPressed) {\n                return;\n            }\n            const dataAsTextHtml = data.dataTransfer.getData('text/html');\n            if (!dataAsTextHtml) {\n                const dataAsTextPlain = data.dataTransfer.getData('text/plain');\n                data.content = this._gfmDataProcessor.toView(dataAsTextPlain);\n                return;\n            }\n            const markdownFromHtml = this._parseMarkdownFromHtml(dataAsTextHtml);\n            if (markdownFromHtml) {\n                data.content = this._gfmDataProcessor.toView(markdownFromHtml);\n            }\n        });\n    }\n    /**\n\t * Determines if the code copied from a website in the `text/html` type can be parsed as Markdown.\n\t * It removes any OS-specific HTML tags, for example, <meta> on macOS and <!--StartFragment--> on Windows.\n\t * Then removes a single wrapper HTML tag or wrappers for sibling tags, and if there are no more tags left,\n\t * returns the remaining text. Returns null if there are any remaining HTML tags detected.\n\t *\n\t * @param htmlString Clipboard content in the `text/html` type format.\n\t */ _parseMarkdownFromHtml(htmlString) {\n        const withoutOsSpecificTags = this._removeOsSpecificTags(htmlString);\n        if (!this._containsOnlyAllowedFirstLevelTags(withoutOsSpecificTags)) {\n            return null;\n        }\n        const withoutWrapperTag = this._removeFirstLevelWrapperTagsAndBrs(withoutOsSpecificTags);\n        if (this._containsAnyRemainingHtmlTags(withoutWrapperTag)) {\n            return null;\n        }\n        return this._replaceHtmlReservedEntitiesWithCharacters(withoutWrapperTag);\n    }\n    /**\n\t * Removes OS-specific tags.\n\t *\n\t * @param htmlString Clipboard content in the `text/html` type format.\n\t */ _removeOsSpecificTags(htmlString) {\n        // Removing the <meta> tag present on Mac.\n        const withoutMetaTag = htmlString.replace(/^<meta\\b[^>]*>/, '').trim();\n        // Removing the <html> tag present on Windows.\n        const withoutHtmlTag = withoutMetaTag.replace(/^<html>/, '').replace(/<\\/html>$/, '').trim();\n        // Removing the <body> tag present on Windows.\n        const withoutBodyTag = withoutHtmlTag.replace(/^<body>/, '').replace(/<\\/body>$/, '').trim();\n        // Removing the <!--StartFragment--> tag present on Windows.\n        return withoutBodyTag.replace(/^<!--StartFragment-->/, '').replace(/<!--EndFragment-->$/, '').trim();\n    }\n    /**\n\t * If the input HTML string contains any first-level formatting tags\n\t * like <b>, <strong>, or <i>, we should not treat it as Markdown.\n\t *\n\t * @param htmlString Clipboard content.\n\t */ _containsOnlyAllowedFirstLevelTags(htmlString) {\n        const parser = new DOMParser();\n        const { body: tempElement } = parser.parseFromString(htmlString, 'text/html');\n        const tagNames = Array.from(tempElement.children).map((el)=>el.tagName);\n        return tagNames.every((el)=>ALLOWED_MARKDOWN_FIRST_LEVEL_TAGS.includes(el));\n    }\n    /**\n\t * Removes multiple HTML wrapper tags from a list of sibling HTML tags.\n\t *\n\t * @param htmlString Clipboard content without any OS-specific tags.\n\t */ _removeFirstLevelWrapperTagsAndBrs(htmlString) {\n        const parser = new DOMParser();\n        const { body: tempElement } = parser.parseFromString(htmlString, 'text/html');\n        const brElements = tempElement.querySelectorAll('br');\n        for (const br of brElements){\n            br.replaceWith('\\n');\n        }\n        const outerElements = tempElement.querySelectorAll(':scope > *');\n        for (const element of outerElements){\n            const elementClone = element.cloneNode(true);\n            element.replaceWith(...elementClone.childNodes);\n        }\n        return tempElement.innerHTML;\n    }\n    /**\n\t * Determines if a string contains any HTML tags.\n\t */ _containsAnyRemainingHtmlTags(str) {\n        return str.includes('<');\n    }\n    /**\n\t * Replaces the reserved HTML entities with the actual characters.\n\t *\n\t * @param htmlString Clipboard content without any tags.\n\t */ _replaceHtmlReservedEntitiesWithCharacters(htmlString) {\n        return htmlString.replace(/&gt;/g, '>').replace(/&lt;/g, '<').replace(/&nbsp;/g, ' ');\n    }\n}\n\nexport { Markdown, PasteFromMarkdownExperimental };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module markdown-gfm/markdown2html/markdown2html\n */\n\nimport { marked } from 'marked';\n\n/**\n * This is a helper class used by the {@link module:markdown-gfm/markdown Markdown feature} to convert Markdown to HTML.\n */\nexport class MarkdownToHtml {\n\tprivate _parser: typeof marked;\n\n\tprivate _options = {\n\t\tgfm: true,\n\t\tbreaks: true,\n\t\ttables: true,\n\t\txhtml: true,\n\t\theaderIds: false\n\t};\n\n\tconstructor() {\n\t\t// Overrides.\n\t\tmarked.use( {\n\t\t\ttokenizer: {\n\t\t\t\t// Disable the autolink rule in the lexer.\n\t\t\t\tautolink: () => null as any,\n\t\t\t\turl: () => null as any\n\t\t\t},\n\t\t\trenderer: {\n\t\t\t\tcheckbox( ...args: Array<any> ) {\n\t\t\t\t\t// Remove bogus space after <input type=\"checkbox\"> because it would be preserved\n\t\t\t\t\t// by DomConverter as it's next to an inline object.\n\t\t\t\t\treturn Object.getPrototypeOf( this ).checkbox.call( this, ...args ).trimRight();\n\t\t\t\t},\n\n\t\t\t\tcode( ...args: Array<any> ) {\n\t\t\t\t\t// Since marked v1.2.8, every <code> gets a trailing \"\\n\" whether it originally\n\t\t\t\t\t// ended with one or not (see https://github.com/markedjs/marked/issues/1884 to learn why).\n\t\t\t\t\t// This results in a redundant soft break in the model when loaded into the editor, which\n\t\t\t\t\t// is best prevented at this stage. See https://github.com/ckeditor/ckeditor5/issues/11124.\n\t\t\t\t\treturn Object.getPrototypeOf( this ).code.call( this, ...args ).replace( '\\n</code>', '</code>' );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tthis._parser = marked;\n\t}\n\n\tpublic parse( markdown: string ): string {\n\t\treturn this._parser.parse( markdown, this._options );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module markdown-gfm/html2markdown/html2markdown\n */\n\nimport Turndown from 'turndown';\n\n// There no avaialble types for 'turndown-plugin-gfm' module and it's not worth to generate them on our own.\n/* eslint-disable @typescript-eslint/ban-ts-comment */\n// @ts-ignore\nimport { gfm } from 'turndown-plugin-gfm';\n\nconst autolinkRegex = /* #__PURE__ */ new RegExp(\n\t// Prefix.\n\t/\\b(?:(?:https?|ftp):\\/\\/|www\\.)/.source +\n\n\t// Domain name.\n\t/(?![-_])(?:[-_a-z0-9\\u00a1-\\uffff]{1,63}\\.)+(?:[a-z\\u00a1-\\uffff]{2,63})/.source +\n\n\t// The rest.\n\t/(?:[^\\s<>]*)/.source,\n\t'gi'\n);\n\nclass UpdatedTurndown extends Turndown {\n\tpublic override escape( string: string ): string {\n\t\tconst originalEscape = super.escape;\n\n\t\tfunction escape( string: string ): string {\n\t\t\tstring = originalEscape( string );\n\n\t\t\t// Escape \"<\".\n\t\t\tstring = string.replace( /</g, '\\\\<' );\n\n\t\t\treturn string;\n\t\t}\n\n\t\t// Urls should not be escaped. Our strategy is using a regex to find them and escape everything\n\t\t// which is out of the matches parts.\n\n\t\tlet escaped = '';\n\t\tlet lastLinkEnd = 0;\n\n\t\tfor ( const match of this._matchAutolink( string ) ) {\n\t\t\tconst index = match.index!;\n\n\t\t\t// Append the substring between the last match and the current one (if anything).\n\t\t\tif ( index > lastLinkEnd ) {\n\t\t\t\tescaped += escape( string.substring( lastLinkEnd, index ) );\n\t\t\t}\n\n\t\t\tconst matchedURL = match[ 0 ];\n\n\t\t\tescaped += matchedURL;\n\n\t\t\tlastLinkEnd = index + matchedURL.length;\n\t\t}\n\n\t\t// Add text after the last link or at the string start if no matches.\n\t\tif ( lastLinkEnd < string.length ) {\n\t\t\tescaped += escape( string.substring( lastLinkEnd, string.length ) );\n\t\t}\n\n\t\treturn escaped;\n\t}\n\n\t/**\n\t * Trimming end of link.\n\t * https://github.github.com/gfm/#autolinks-extension-\n\t */\n\tprivate* _matchAutolink( string: string ) {\n\t\tfor ( const match of string.matchAll( autolinkRegex ) ) {\n\t\t\tconst matched = match[ 0 ];\n\t\t\tconst length = this._autolinkFindEnd( matched );\n\n\t\t\tyield Object.assign(\n\t\t\t\t[ matched.substring( 0, length ) ],\n\t\t\t\t{ index: match.index }\n\t\t\t);\n\n\t\t\t// We could adjust regex.lastIndex but it's not needed because what we skipped is for sure not a valid URL.\n\t\t}\n\t}\n\n\t/**\n\t * Returns the new length of the link (after it would trim trailing characters).\n\t */\n\tprivate _autolinkFindEnd( string: string ) {\n\t\tlet length = string.length;\n\n\t\twhile ( length > 0 ) {\n\t\t\tconst char = string[ length - 1 ];\n\n\t\t\tif ( '?!.,:*_~\\'\"'.includes( char ) ) {\n\t\t\t\tlength--;\n\t\t\t} else if ( char == ')' ) {\n\t\t\t\tlet openBrackets = 0;\n\n\t\t\t\tfor ( let i = 0; i < length; i++ ) {\n\t\t\t\t\tif ( string[ i ] == '(' ) {\n\t\t\t\t\t\topenBrackets++;\n\t\t\t\t\t} else if ( string[ i ] == ')' ) {\n\t\t\t\t\t\topenBrackets--;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If there is fewer opening brackets then closing ones we should remove a closing bracket.\n\t\t\t\tif ( openBrackets < 0 ) {\n\t\t\t\t\tlength--;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn length;\n\t}\n}\n\n/**\n * This is a helper class used by the {@link module:markdown-gfm/markdown Markdown feature} to convert HTML to Markdown.\n */\nexport class HtmlToMarkdown {\n\tprivate _parser: UpdatedTurndown;\n\n\tconstructor() {\n\t\tthis._parser = this._createParser();\n\t}\n\n\tpublic parse( html: string ): string {\n\t\treturn this._parser.turndown( html );\n\t}\n\n\tpublic keep( elements: Turndown.Filter ): void {\n\t\tthis._parser.keep( elements );\n\t}\n\n\tprivate _createParser(): UpdatedTurndown {\n\t\tconst parser = new UpdatedTurndown( {\n\t\t\tcodeBlockStyle: 'fenced',\n\t\t\thr: '---',\n\t\t\theadingStyle: 'atx'\n\t\t} );\n\n\t\tparser.use( [\n\t\t\tgfm,\n\t\t\tthis._todoList\n\t\t] );\n\n\t\treturn parser;\n\t}\n\n\t// This is a copy of the original taskListItems rule from turndown-plugin-gfm, with minor changes.\n\tprivate _todoList( turndown: UpdatedTurndown ): void {\n\t\tturndown.addRule( 'taskListItems', {\n\t\t\tfilter( node: any ) {\n\t\t\t\treturn node.type === 'checkbox' &&\n\t\t\t\t\t// Changes here as CKEditor outputs a deeper structure.\n\t\t\t\t\t( node.parentNode.nodeName === 'LI' || node.parentNode.parentNode.nodeName === 'LI' );\n\t\t\t},\n\t\t\treplacement( content: any, node: any ) {\n\t\t\t\treturn ( node.checked ? '[x]' : '[ ]' ) + ' ';\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module markdown-gfm/gfmdataprocessor\n */\n\nimport {\n\tHtmlDataProcessor,\n\ttype DataProcessor,\n\ttype ViewDocument,\n\ttype ViewDocumentFragment,\n\ttype MatcherPattern\n} from 'ckeditor5/src/engine.js';\n\nimport { MarkdownToHtml } from './markdown2html/markdown2html.js';\nimport { HtmlToMarkdown } from './html2markdown/html2markdown.js';\n\n/**\n * This data processor implementation uses GitHub Flavored Markdown as input/output data.\n *\n * See the {@glink features/markdown Markdown output} guide to learn more on how to enable it.\n */\nexport default class GFMDataProcessor implements DataProcessor {\n\t/**\n\t * HTML data processor used to process HTML produced by the Markdown-to-HTML converter and the other way.\n\t */\n\tprivate _htmlDP: HtmlDataProcessor;\n\n\t/**\n\t * Helper for converting Markdown to HTML.\n\t */\n\tprivate _markdown2html: MarkdownToHtml;\n\n\t/**\n\t * Helper for converting HTML to Markdown.\n\t */\n\tprivate _html2markdown: HtmlToMarkdown;\n\n\t/**\n\t * Creates a new instance of the Markdown data processor class.\n\t */\n\tconstructor( document: ViewDocument ) {\n\t\tthis._htmlDP = new HtmlDataProcessor( document );\n\t\tthis._markdown2html = new MarkdownToHtml();\n\t\tthis._html2markdown = new HtmlToMarkdown();\n\t}\n\n\t/**\n\t * Keeps the specified element in the output as HTML. This is useful if the editor contains\n\t * features producing HTML that is not a part of the Markdown standard.\n\t *\n\t * By default, all HTML tags are removed.\n\t *\n\t * @param element The element name to be kept.\n\t */\n\tpublic keepHtml( element: keyof HTMLElementTagNameMap ): void {\n\t\tthis._html2markdown.keep( [ element ] );\n\t}\n\n\t/**\n\t * Converts the provided Markdown string to a view tree.\n\t *\n\t * @param data A Markdown string.\n\t * @returns The converted view element.\n\t */\n\tpublic toView( data: string ): ViewDocumentFragment {\n\t\tconst html = this._markdown2html.parse( data );\n\t\treturn this._htmlDP.toView( html );\n\t}\n\n\t/**\n\t * Converts the provided {@link module:engine/view/documentfragment~DocumentFragment} to data format &ndash; in this\n\t * case to a Markdown string.\n\t *\n\t * @returns Markdown string.\n\t */\n\tpublic toData( viewFragment: ViewDocumentFragment ): string {\n\t\tconst html = this._htmlDP.toData( viewFragment );\n\t\treturn this._html2markdown.parse( html );\n\t}\n\n\t/**\n\t * Registers a {@link module:engine/view/matcher~MatcherPattern} for view elements whose content should be treated as raw data\n\t * and not processed during the conversion from Markdown to view elements.\n\t *\n\t * The raw data can be later accessed by a\n\t * {@link module:engine/view/element~Element#getCustomProperty custom property of a view element} called `\"$rawContent\"`.\n\t *\n\t * @param pattern The pattern matching all view elements whose content should\n\t * be treated as raw data.\n\t */\n\tpublic registerRawContentMatcher( pattern: MatcherPattern ): void {\n\t\tthis._htmlDP.registerRawContentMatcher( pattern );\n\t}\n\n\t/**\n\t * This method does not have any effect on the data processor result. It exists for compatibility with the\n\t * {@link module:engine/dataprocessor/dataprocessor~DataProcessor `DataProcessor` interface}.\n\t */\n\tpublic useFillerType(): void {}\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module markdown-gfm/markdown\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\nimport GFMDataProcessor from './gfmdataprocessor.js';\n\n/**\n * The GitHub Flavored Markdown (GFM) plugin.\n *\n * For a detailed overview, check the {@glink features/markdown Markdown feature} guide.\n */\nexport default class Markdown extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\teditor.data.processor = new GFMDataProcessor( editor.data.viewDocument );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'Markdown' as const;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module markdown-gfm/pastefrommarkdownexperimental\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\nimport { ClipboardPipeline, type ClipboardInputTransformationEvent } from 'ckeditor5/src/clipboard.js';\nimport GFMDataProcessor from './gfmdataprocessor.js';\nimport type { ViewDocumentKeyDownEvent } from 'ckeditor5/src/engine.js';\n\nconst ALLOWED_MARKDOWN_FIRST_LEVEL_TAGS = [ 'SPAN', 'BR', 'PRE', 'CODE' ];\n\n/**\n * The GitHub Flavored Markdown (GFM) paste plugin.\n *\n * For a detailed overview, check the {@glink features/pasting/paste-markdown Paste Markdown feature} guide.\n */\nexport default class PasteFromMarkdownExperimental extends Plugin {\n\t/**\n\t * @internal\n\t */\n\tprivate _gfmDataProcessor: GFMDataProcessor;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\tthis._gfmDataProcessor = new GFMDataProcessor( editor.data.viewDocument );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'PasteFromMarkdownExperimental' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ClipboardPipeline ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\tconst clipboardPipeline: ClipboardPipeline = editor.plugins.get( 'ClipboardPipeline' );\n\n\t\tlet shiftPressed = false;\n\n\t\tthis.listenTo<ViewDocumentKeyDownEvent>( viewDocument, 'keydown', ( evt, data ) => {\n\t\t\tshiftPressed = data.shiftKey;\n\t\t} );\n\n\t\tthis.listenTo<ClipboardInputTransformationEvent>( clipboardPipeline, 'inputTransformation', ( evt, data ) => {\n\t\t\tif ( shiftPressed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst dataAsTextHtml = data.dataTransfer.getData( 'text/html' );\n\n\t\t\tif ( !dataAsTextHtml ) {\n\t\t\t\tconst dataAsTextPlain = data.dataTransfer.getData( 'text/plain' );\n\n\t\t\t\tdata.content = this._gfmDataProcessor.toView( dataAsTextPlain );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst markdownFromHtml = this._parseMarkdownFromHtml( dataAsTextHtml );\n\n\t\t\tif ( markdownFromHtml ) {\n\t\t\t\tdata.content = this._gfmDataProcessor.toView( markdownFromHtml );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Determines if the code copied from a website in the `text/html` type can be parsed as Markdown.\n\t * It removes any OS-specific HTML tags, for example, <meta> on macOS and <!--StartFragment--> on Windows.\n\t * Then removes a single wrapper HTML tag or wrappers for sibling tags, and if there are no more tags left,\n\t * returns the remaining text. Returns null if there are any remaining HTML tags detected.\n\t *\n\t * @param htmlString Clipboard content in the `text/html` type format.\n\t */\n\tprivate _parseMarkdownFromHtml( htmlString: string ): string | null {\n\t\tconst withoutOsSpecificTags = this._removeOsSpecificTags( htmlString );\n\n\t\tif ( !this._containsOnlyAllowedFirstLevelTags( withoutOsSpecificTags ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst withoutWrapperTag = this._removeFirstLevelWrapperTagsAndBrs( withoutOsSpecificTags );\n\n\t\tif ( this._containsAnyRemainingHtmlTags( withoutWrapperTag ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this._replaceHtmlReservedEntitiesWithCharacters( withoutWrapperTag );\n\t}\n\n\t/**\n\t * Removes OS-specific tags.\n\t *\n\t * @param htmlString Clipboard content in the `text/html` type format.\n\t */\n\tprivate _removeOsSpecificTags( htmlString: string ): string {\n\t\t// Removing the <meta> tag present on Mac.\n\t\tconst withoutMetaTag = htmlString.replace( /^<meta\\b[^>]*>/, '' ).trim();\n\t\t// Removing the <html> tag present on Windows.\n\t\tconst withoutHtmlTag = withoutMetaTag.replace( /^<html>/, '' ).replace( /<\\/html>$/, '' ).trim();\n\t\t// Removing the <body> tag present on Windows.\n\t\tconst withoutBodyTag = withoutHtmlTag.replace( /^<body>/, '' ).replace( /<\\/body>$/, '' ).trim();\n\n\t\t// Removing the <!--StartFragment--> tag present on Windows.\n\t\treturn withoutBodyTag.replace( /^<!--StartFragment-->/, '' ).replace( /<!--EndFragment-->$/, '' ).trim();\n\t}\n\n\t/**\n\t * If the input HTML string contains any first-level formatting tags\n\t * like <b>, <strong>, or <i>, we should not treat it as Markdown.\n\t *\n\t * @param htmlString Clipboard content.\n\t */\n\tprivate _containsOnlyAllowedFirstLevelTags( htmlString: string ): boolean {\n\t\tconst parser = new DOMParser();\n\t\tconst { body: tempElement } = parser.parseFromString( htmlString, 'text/html' );\n\n\t\tconst tagNames = Array.from( tempElement.children ).map( el => el.tagName );\n\n\t\treturn tagNames.every( el => ALLOWED_MARKDOWN_FIRST_LEVEL_TAGS.includes( el ) );\n\t}\n\n\t/**\n\t * Removes multiple HTML wrapper tags from a list of sibling HTML tags.\n\t *\n\t * @param htmlString Clipboard content without any OS-specific tags.\n\t */\n\tprivate _removeFirstLevelWrapperTagsAndBrs( htmlString: string ): string {\n\t\tconst parser = new DOMParser();\n\t\tconst { body: tempElement } = parser.parseFromString( htmlString, 'text/html' );\n\n\t\tconst brElements = tempElement.querySelectorAll( 'br' );\n\n\t\tfor ( const br of brElements ) {\n\t\t\tbr.replaceWith( '\\n' );\n\t\t}\n\n\t\tconst outerElements = tempElement.querySelectorAll( ':scope > *' );\n\n\t\tfor ( const element of outerElements ) {\n\t\t\tconst elementClone = element.cloneNode( true );\n\t\t\telement.replaceWith( ...elementClone.childNodes );\n\t\t}\n\n\t\treturn tempElement.innerHTML;\n\t}\n\n\t/**\n\t * Determines if a string contains any HTML tags.\n\t */\n\tprivate _containsAnyRemainingHtmlTags( str: string ): boolean {\n\t\treturn str.includes( '<' );\n\t}\n\n\t/**\n\t * Replaces the reserved HTML entities with the actual characters.\n\t *\n\t * @param htmlString Clipboard content without any tags.\n\t */\n\tprivate _replaceHtmlReservedEntitiesWithCharacters( htmlString: string ) {\n\t\treturn htmlString\n\t\t\t.replace( /&gt;/g, '>' )\n\t\t\t.replace( /&lt;/g, '<' )\n\t\t\t.replace( /&nbsp;/g, ' ' );\n\t}\n}\n"]}